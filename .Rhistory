bquote("answer = ".(x), splice=TRUE)
bquote("answer = .(x)", splice=TRUE)
bquote("answer = ".(x), splice=TRUE)
x = 1
quote(1 + .(x))   # 1 + .(x)
bquote(1 + .(x))  # 1 + 1
bquote(template + .(x))
bquote(sin(.(x))) # sin(1)
quote(1 + .(x))   # 1 + .(x)
(res=bquote(1 + .(x)))  # 1 + 1
(res=bquote(template + .(x)))
(res=bquote(sin(.(x)))) # sin(1)
(res=bquote(1 + .(x)))  # 1 + 1
is.call(res)
(res=bquote(template + .(x)))
is.call(res)
(res=bquote(sin(.(x)))) # sin(1)
is.call(res)
is.expression(res)
(res=bquote(1 + .(x)))  # 1 + 1
is.call(res)
is.expression(res)
(res=bquote(template + .(x)))
is.call(res)
is.expression(res)
rm(x)
bquote(x)
eval(bquote("my name is .(x)   "))
x = "jim"
bquote(my names is .(x))            ## error
eval(bquote("my name is .(x)   "))
eval(bquote("my name is"  .(x)   ))
eval(bquote("my name is .(x)   ", splice=TRUE))
x = 1
(res=bquote(sin(.(x)))) # sin(1)
(res=bquote(sin(.(x), splice=TRUE))) # sin(1)
(res=bquote(sin(.(x)), splice=TRUE)) # sin(1)
(res=bquote(sin(.(x+1)))) # sin(1)
(res=bquote(sin(.(x+1)), splice=TRUE)) # sin(1)
?getAnywhere
library(pkgload)
library(rlang)
pkgload::inst("ggplot2") #/home/jim/R/x86...-library/3.6/ggplot2
pkgload::inst("base")   #/usr/lib/R/library/base
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
getAnywhere(aes)
```{r}
getAnywhere(vapply)
getAnywhere(getAnywhere)
getAnywhere(".rs.restart")
getAnywhere(.rs.restart)
?restart
?.rs
ls()
x
x=
q
ls()
x
ls()
rm(ls())
?rm
rm(list=ls())
ls()
?exists
f = function(arg) substitute(arg)
f(1:10)
x = 10
f(x)
x = 10
y = 100
f(x + y^2)
f(x+y+z)
w(1:10)
w = function(arg) print(arg)
w(1:10)
w(x)
g = function(arg) deparse(subsitute(arg))
g(1:10)
g = function(arg) deparse(substitute(arg))
g(1:10)
g(x)
g(x + y^2)
g(x + y + z)
g = function(arg) deparse(f(arg))
g(1:10)
f(arg)
g(1:10)   ## "arg"
deparse("hello")
deparse(hello)
?substitute
as.list(g)
ast(g)
lobstr::ast(g)
g
f
as.list(f)
as.list(f(1:10))
f = function(arg) substitute(arg)
f(1:10)
(res = f(1:10))
is.call(res)
e = expression(x+y)
e
(e = expression(x+y))
(e = expression(x+y))     ## expression(x+y)
(e = expression(2+2))
is.expression(e)
as.expression(e)
x = a
(e = expression(x+y))     ## expression(x+y)
as.expression(e)
f = function(x) x^2
is.expression(f)
(e= as.expression(f))
(e = expression(x+y))     ## expression(x+y)
as.expression(e)          ## expression(x+y)
x = a
(e = expression(x+y))     ## expression(x+y)
is.list(e)
is.expression(e)
(as.list(e))
is.list(e)
expression(a+b)
expression("a+b")
expression("a"+b)
f = function(x) x^2
is.expression(f)        ## FALSE
(e= as.expression(f))   ## Error  (closure -> expression, no-no, why?)
as.list(f)
as.expression(2+2)
rm(x)
as.expression(2+x)
as.expression(sin(x = pi/2))
(as.expression(sin(x = pi/2)))
(as.expression(sin(x = pi/2)))    ## looks evaluated to me
(as.expression(sin(x)))    ## looks evaluated to me
as.expression(sin(y))
y = pi/2
as.expression(sin(y))
?as.expression
as.expression(2+2)
expression(2+2)
as.expression(2+x)
expression(2+x)
expresson(sin(x))
expression(sin(x))
expression(sin(x = pi/2))
y=pi/2
expression(f)
e=expression(f)
e
str(e)
ls.str(e)
as.list(e)
ast(e)
e
ast(x=2)
ast(x^2 + y)
ast(f)
f
f = function(fun, args=NULL) {
deparse(substitute(fun))
}
typeof(f(mean))                 ## character
w = function(arg) print(arg)    ## normal
f = function(arg) substitute(arg) ## substitute
w(1:10)     #  1 2 3 ... 10
(res = f(1:10))     ## 1:10, which is a call.
is.call(res
)
res
w(x)        # 10
x = 10
w(x)        # 10
f(x)
x = 10
y = 100
f(x + y^2)
f(x+y+z)
r1 = quote(x + 5*3)
r2 = substitute(x + 5*3 )
is.call(r1,r2)
is.call(list(r1,r2))
is.call(r1)
is.call(r2)
eval(r1)
eval(r2)
f <- function(argX) {
list(argX,
quote(argX),
substitute(argX)
)
}
suppliedArgX <- 100
f(argX  <-  suppliedArgX)
f(argX = suppliedArgX)
f(suppliedArgX)
g = function(arg) deparse(substitute(arg))
g(1:10)
g(x)
g(x + y^2)
g(x + y + z)
library(tibble)
library(jsonlite)
library(tidyverse)
library(purrr)
library(repurrrsive)  # recursive lists, R, JSON, ...
install.packages(c("purrr", "repurrrsive", "listviewer"))
library(purrr)
library(repurrrsive)  # recursive lists, R, JSON, ...
library(listviewer)   # interactive exam
g <- function(x,max.level=1,list.len=3, vec.len=1, give.attr=F, ...) {
cat("max.level=", max.level, "list.len (peers)=", list.len,"vec.len (elements)", vec.len,  "\n")
str(x, max.level, list.len, vec.len, give.attr, ...)
}
g(gh_repos)
data(package="repurrrsive")
listviewer::jsonedit(gh_users)
dput(gh_users[][[1]])
g(gh_users)
g(gh_users[[1]])
gh_users[[1]]
gh_users[1][[1]]
length(gh_users[1])
length(gh_users[1][[1]])
dput(gh_users[1])
g(gh_users[1], vec.len=4)
dput(gh_users[1])
dput(gh_users[1][1:6])
gh_users[1][1:6]
g(gh_users)         # list of 6
g(gh_users[[1]])
g(gh_users[[1]], vec.len=4)
g(gh_users[[1]], list.len=4)
str(gh_users[1])
gh_users[[1]]
gh_users[[1]][c(1,2,3)]
gh_users[[1]][1:3]
gh_users[[2]][1:3]
g(gh_users[[1]][1:3])
g(gh_users[[1]])
gh_users[[1]][1:3]
str(gh_users[[1]])
str(gh_users[[1]], vec.len=3)
str(gh_users[[1]], list.len=3)
g(gh_users[[1]], list.len=3 )
str(gh_users[[1]], list.len=4)
library(tibble)
library(jsonlite)
library(dplyr)
library(listviewer)
library(tidyr)
library(tibble)
library(jsonlite)
library(dplyr)
library(listviewer)
library(tidyr)
```{r}
x <- jsonlite::read_json(the_file)
```{r}
library(tibble)
library(jsonlite)
library(dplyr)
library(listviewer)
library(tidyr)
the_dir = "bookmarks"
the_file <- paste0(the_dir, "/", "bookmarks-2023-05-24_FF.json")
the_dir
the_file
x <- jsonlite::read_json(the_file)
dir()
the_dir = "~/code/try_things_here/rrapply/bookmarks"
the_file <- paste0(the_dir, "/", "bookmarks-2023-05-24_FF.json")
the_dir
the_file
x <- jsonlite::read_json(the_file)
listviewer::jsonedit(x)     ## list(guid, title, ... children=list(...))
x
dput(x[1:9])
x1 <- x$children %>% tibble()
x1
x$children
x1 <- x$children %>% tibble()
jsonedit(x1)
x1
x$children |> tibble()
x
x$chilrend
t x$children
t=x$children
t
t |> tibble()
library(tibble)
t |> tibble()
x1
typeof(x1)
as.tibble(x1)
df1  <- data.frame(ONE=letters[1:3])
---
df1  <- data.frame(ONE=letters[1:3])
```
---
```{r}
1 + 1
2 * 2
library(rlang)
library(lobstr)
lobstr::ast(f(x, "y", 1))   # knitr complains about character
lobstr::ast(
f(g(1, 2), h(3, 4, i()))
)
lobstr::ast(
f(g(h(2)))
)
z= 2
lobstr::ast(f(z))
lobstr::ast(f(z = 2))
lobstr::ast(f(eval(z)))
lobstr::ast(f(!!z))
lobstr::ast(f(eval(z))) # does not evaluate !
lobstr::ast(f(!!z))   # evaluates !
lobstr::ast(f(z = 3))
lobstr::ast(f(eval(z))) # does not evaluate !
lobstr::ast(f(!!z))   # evaluates !
lobstr::ast(f(eval(z, envir=parent.frame(2)))) # does not evaluate !
lobstr::ast(f(eval(z, envir=parent.frame()))) # does not evaluate !
ls()
lobstr::ast(f(eval(z, envir=globalenv()))) # does not evaluate !
globalenv()
lobstr::ast(
`<-`(y, `*`(x, 10))
)
expr(mean(x, na.rm = TRUE))
expr(mean(x, na.rm = TRUE))
expr(10 + 100 + 1000)
arg = warn("boom!")
ignore = function(x) NULL
force = function(x) x
ignore(arg)
force(arg)
arg = warn("boom!")
defuse(arg)
rlang::defuse(arg)
library(tidyverse)
rlang::defuse(arg)
ignore(arg)
force(arg)
force(warn("boom!"))
rlang::defuse(arg)
rlang::expr(force(warn("boom!")))
eval(rlang::expr(force(warn("boom!"))))   # aka capture expression
force(arg)
force(warn("boom!"))
arg = warn("boom!")
ignore = function(x) NULL
force = function(x) x
ignore(arg)
force(arg)
library(sf)
install.packages("sf")
library(sf)
demo(nc, ask = FALSE, echo = FALSE)
plot(st_geometry(nc))
?st_geometry
nc
plot(st_geometry(us))
plot(st_geometry(usa))
?sf
help(pkg=sf)
help(sf)
library(dplyr)
library(tibble)
library(tidyr)
library(tibble)
classroom <- tribble(
~name,    ~quiz1, ~quiz2, ~test1,
"Billy",  NA,     "D",    "C",
"Suzy",   "F",    NA,     NA,
"Lionel", "B",    "C",    "B",
"Jenny",  "A",    "A",    "B"
)
classroom
classroom <- tribble(
~name,    ~quiz1, ~quiz2, ~test1,
"Billy",  NA,     "D",    "C",
"Suzy",   "F",    NA,     NA,
"Lionel", "B",    "C",    "B",
"Jenny",  "A",    "A",    "B"
)
classroom
library(dplyr)
library(tibble)
library(tidyr)
library(tibble)
classroom <- tribble(
~name,    ~quiz1, ~quiz2, ~test1,
"Billy",  NA,     "D",    "C",
"Suzy",   "F",    NA,     NA,
"Lionel", "B",    "C",    "B",
"Jenny",  "A",    "A",    "B"
)
classroom
classroom <- tribble(
~name,    ~quiz1, ~quiz2, ~test1,
"Billy",  NA,     "D",    "C",
"Suzy",   "F",    NA,     NA,
"Lionel", "B",    "C",    "B",
"Jenny",  "A",    "A",    "B"
)
classroom
ls()
dir()
data.frame(ID = "A",
Plan = "Ab",
Year = 2024,
Stock1_name = "stock 1",
Stock1_dollars = 100,
Stock2_name = "stock 2",
Stock2_dollars = 200)  |>
pivot_longer(cols = starts_with("Stock"), names_to = c("num", ".value"), names_sep = "_")
data.frame(ID = "A",
Plan = "Ab",
Year = 2024,
Stock1_name = "stock 1",
Stock1_dollars = 100,
Stock2_name = "stock 2",
Stock2_dollars = 200)  |>
pivot_longer(cols = starts_with("Stock"), names_to = c("num", ".value"), names_sep = "_")
data.frame(ID = "A",
Plan = "Ab",
Year = 2024,
Stock1_name = "stock 1",
Stock1_dollars = 100,
Stock2_name = "stock 2",
Stock2_dollars = 200)  |>
pivot_longer(cols = starts_with("Stock"), names_to = c("num", ".value"), names_sep = "_")
data.frame(ID = "A",
Plan = "Ab",
Year = 2024,
Stock1_name = "stock 1",
Stock1_dollars = 100,
Stock2_name = "stock 2",
Stock2_dollars = 200)  |>  pivot_longer(cols = starts_with("Stock"), names_to = c("num", ".value"), names_sep = "_")
df = data.frame(ID = "A",
Plan = "Ab",
Year = 2024,
Stock1_name = "stock 1",
Stock1_dollars = 100,
Stock2_name = "stock 2",
Stock2_dollars = 200)
df |>  pivot_longer(cols = starts_with("Stock"),
names_to = c("num", ".value"),
names_sep = "_")
df = data.frame(ID = "A",
Plan = "Ab",
Year = 2024,
Stock1_name = "stock 1",
Stock1_dollars = 100,
Stock2_name = "stock 2",
Stock2_dollars = 200)
df |>  pivot_longer(cols = starts_with("Stock"),
names_to = c("num", ".value"),
names_sep = "_")
df |>  pivot_longer(cols = starts_with("Stock"),
names_to = c("num", ".value"),
names_sep = "_")
df  %>% pivot_longer(cols = starts_with("Stock"),
names_to = c(".value", NA),
names_sep = "_",
values_transform = as.character)
df |>  pivot_longer(cols = contains("_name"),
names_to = c("Stock"))
q()
n
