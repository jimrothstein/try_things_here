}
formals(dbinom)
N=1000
k=500
dbinom(x=x,
size=N,
prob=prob)
dbinom(x=k,
size=N,
prob=prob)
N=1000
k=500
prop=.5
dbinom(x=k,
size=N,
prob=prob)
formals(dbinom)
args(dbinom)
is.numeric((N))
vapply(c(N,k,prop), is.numeric, T)
dbinom(x=k,
size=N,
prob=prob)
?dbinom
dbinom(x=c(500),
size=N,
prob=prob)
N=1000
k=500
prop=.5
is.numeric((N))
vapply(c(N,k,prop), is.numeric, T)
dbinom(x=c(500),
size=N,
prob=prob)
dbinom(x=c(500),
size=N,
prob=c(.5))
dbinom(x=c(500),
size=N,
prob=c(.1, .5))
curve(f(N, k, prob),
from = 0,
to = 1,
col =2,
lwd = 3,
xname = "prob"
)
curve(f(N, k, prob),
from = 0,
to = 1,
col =2,
lwd = 3,
xname = "prob"
)
N=100
k=10
curve(f(N, k, prob),
from = 0,
to = 1,
col =2,
lwd = 3,
xname = "prob"
)
k=90
curve(f(N, k, prob),
from = 0,
to = 1,
col =2,
lwd = 3,
xname = "prob"
)
curve(f(N, k, prob),
from = 0,
to = 1,
col =3,
lwd = 3,
xname = "prob"
)
curve(f(N, k, prob),
from = 0,
to = 1,
col =4,
lwd = 1,
xname = "prob"
)
curve(f(N, k, prob),
from = 0,
to = 1,
col =4,
lwd = 1,
lty = 2,
xname = "prob"
)
curve(f(N, k, prob),
from = 0,
to = 1,
col =4,
lwd = 1,
lty = 3,
xname = "prob"
)
curve(f(N, k, prob),
from = 0,
to = 1,
col =4,
lwd = 1,
lty = 4,
xname = "prob"
)
curve(f(N, k, prob),
from = 0,
to = 1,
col =4,
lwd = 1,
lty = 9,
xname = "prob"
)
curve(f(N, k, prob),
from = 0,
to = 1,
col =4,
lwd = 1,
lty = 12,
xname = "prob"
)
curve(f(N, k, prob),
from = 0,
to = 1,
col =3,
lwd = 1,
lty = 1
xname = "prob",
curve(f(N, k, prob),
from = 0,
to = 1,
col =3,
lwd = 1,
lty = 1,
xname = "prob",
add = T
)
curve(f(N, k, prob),
from = 0,
to = 1,
col =3,
lwd = 1,
lty = 1,
xname = "prob",
add = T
)
N=100
k=90
curve(f(N, k, prob),
from = 0,
to = 1,
col =4,
lwd = 1,
lty = 12,
xname = "prob"
)
k=10
curve(f(N, k, prob),
from = 0,
to = 1,
col =3,
lwd = 1,
lty = 1,
xname = "prob",
add = T
)
k=12
curve(f(N, k, prob),
from = 0,
to = 1,
col =5,
lwd = 3,
xname = "prob",
add = T
)
curve(f(N, k, prob),
from = 0,
to = 1,
col =5,
lwd = 1,
xname = "prob",
add = T
)
curve(f(N, k, prob),
from = 0,
to = 1,
col =3,
lwd = 1,
lty = 1,
xname = "prob",
add = T
)
curve(f(N, k, prob),
from = 0,
to = 1,
col =5,
lwd = 3,
xname = "prob",
add = T
)
k=12
curve(f(N, k, prob),
from = 0,
to = 1,
col =5,
lwd = 1,
xname = "prob",
add = T
)
z = c("k=500", "k=100", "k=990")
levels(z)
legend("topleft", legend = z, col = 1:nlevels(z), pch = 1, title = "k successes")
N=25
k=9
curve(f(N, k, prob),
from = 0,
to = 1,
col =5,
lwd = 1,
xname = "prob",
add = T
)
f <- function(size=N, k, prob){
dbinom(x=k,
size=N,
prob=prob)
}
N=100
k=90
prop=.5
##
## dbinom(x=c(500), size=N, prob=c(.1, .5))
##  Try lty=2,3,4....  "line type"
##  Fix N, and vary k.   Each k adds new curve.
curve(f(N, k, prob),
from = 0,
to = 1,
col =4,
lwd = 1,
lty = 12,
xname = "prob"
)
k=10
curve(f(N, k, prob),
from = 0,
to = 1,
col =3,
lwd = 1,
lty = 1,
xname = "prob",
add = T
)
curve(f(N, k, prob),
from = 0,
to = 1,
col =5,
lwd = 3,
xname = "prob",
add = T
)
N=25
k=9
curve(f(N, k, prob),
from = 0,
to = 1,
col =5,
lwd = 1,
xname = "prob",
add = T
)
z = c("k=500", "k=100", "k=990")
levels(z)
legend("topleft", legend = z, col = 1:nlevels(z), pch = 1, title = "k successes")
k=5
curve(f(N, k, prob),
from = 0,
to = 1,
col =5,
lwd = 1,
xname = "prob",
add = T
)
N=5
k=2
curve(f(N, k, prob),
from = 0,
to = 1,
col =5,
lwd = 1,
xname = "prob",
add = T
)
N=5
k=2
curve(f(N, k, prob),
from = 0,
to = 1,
col =5,
lwd = 1,
xname = "prob"
)
```
f <- function(size=N, k, prob){
pbinom(x=k,
size=N,
prob=prob)
}
N=100
k=90
prop=.5
##  Try lty=2,3,4....  "line type"
##  Fix N, and vary k.   Each k adds new curve.
curve(f(N, k, prob),
from = 0,
to = 1,
col =4,
lwd = 1,
lty = 12,
xname = "prob"
)
?pbinom
curve(dbinom(x=1, size=5, prob), from=0, to=1, xname="prob")
curve(dbinom(x=0, size=5, prob), from=0, to=1, xname="prob")
curve(dbinom(x=2, size=5, prob), from=0, to=1, xname="prob")
options(continue)
options(continue="")
options(continue=" ")
curve(dbinom(x=2, size=5, prob), from=0, to=1, xname="prob")
?continue
?options
getOption(continue)
getOption("continue")
x =
sine(3) +
q
option(continue=">")
options(continue= ">")
y =
y +
adsfkj
x =
sine(3) +
# install.packages("devtools")
devtools::install_github("lionel-/codegrip")
# install.packages("devtools")
devtools::install_github("lionel-/codegrip")
devtools:::run_examples()
?run_examples
devtools:::run_examples(as.package(devtools))
devtools:::run_examples(as.package("devtools"))
devtools::install_github("rstudio/addinexamples", type = "source")
names=base::names(par())
names
sapply(values, as.character)
values=uunname(par())
values=unname(par())
values= sapply(values, as.character)
values
values= sapply(values, as.character, simpllify=T)
values
values=unname(par())
values= vapply(values, as.character, NA_character_)
values=unname(par())
values=unlist(values)
values
values=unname(par())
values = as.character(values)
values
values=unname(par())
values = as.character(values)
t = tibble(names=names, values=values)
t
print(t, n=72)
# Create some variables
x <- 1:10
y1 <- x*x
y2  <- 2*y1
# Gives first line
plot(x, y1, type = "b", frame = FALSE, pch = 19,
col = "red", xlab = "x", ylab = "y")
# Add a second line
lines(x, y2, pch = 18, col = "blue", type = "b", lty = 2)
# Add a legend to the plot
legend("topleft", legend=c("Line 1: x*x", "Line 2: 2*x*x"),
col=c("red", "blue"), lty = 1:2, cex=0.8)
# Create some variables
x <- 1:10
y <- 5
# Gives first line
plot(x, y, type = "b", frame = FALSE, pch = 19,
col = "red", xlab = "x", ylab = "y")
y <- rep(x=5,  times=1)
y <- rep(x=5,  times=9)
# Create some variables
x <- 1:10
y <- rep(x=5,  times=9)
# Gives first line
plot(x, y, type = "b", frame = FALSE, pch = 19,
col = "red", xlab = "x", ylab = "y")
y
y <- rep(x=5,  times=length(x))
y
# Gives first line
plot(x, y, type = "b", frame = FALSE, pch = 19,
col = "red", xlab = "x", ylab = "y")
lines(x,y, pch=18, col="blue", type="b", lty=3)
# Gives first line
plot(x, y, type = "b", frame = FALSE, pch = 19,
col = "red", xlab = "x", ylab = "y")
lines(x,y, pch=18, col="blue", type="b", lty=3)
lines(x,y=rep(4, times=length(x)), pch=18, col="blue", type="b", lty=3)
lines(x,y=rep(3, times=length(x)), pch=18,cex=5,  col="blue", type="b", lty=3)
head(mtcars)
mtcars[1:5, hp]
mtcars[1:5, c(hp)]
mtcars[1:5, c("hp")]
mtcars[1:5, hp]
mtcars[1:5, "hp"]
ls()
hp
with(mtcars, hp)
?with
ls()
search()
ls(globalenv())
ls(base)
?ls
ls("package:base")
?data
data(mtcars)
search()
ls()
rm(mtcars)
ls()
# This puts data in globalenv()
data(mtcars)
ls(base)
ls()
rm(mtcars)
ls()
mtcars[1:5, ]
ls()
exists("mtcars",
envir = as.environment("package:datasets"),
inherits = FALSE)
exists("mtcars",
envir = as.environment("package:datasets"),
inherits = FALSE)
exists("hp",
envir = as.environment("package:datasets"),
inherits = FALSE)
exists("hp",
envir = as.environment("package:datasets"),
inherits = T)
is.defined <- function(sym) {
sym <- deparse(substitute(sym))
env <- parent.frame()
exists(sym, env)
}
is.defined(a)
# FALSE
a <- 10
is.defined(a)
any(sapply(1:(which(search() == "tools:rstudio") - 1L),
function(pp) exists(mtcars,  where = pp, inherits = FALSE)))
any(sapply(1:(which(search() == "tools:rstudio") - 1L),
function(pp) exists("mtcars",  where = pp, inherits = FALSE)))
(which(search() == "tools:rstudio")
)
(which(search() == "tools:rstudio") -1L )
search()
which(search() == ".GlobalEnv")
which(search() == "package:base")
:w
which(search() == "package:base")
---
title: "Untitled"
---
title: "Untitled"
iris <- as_tibble(iris)
# across() -----------------------------------------------------------------
# Different ways to select the same set of columns
# See <https://tidyselect.r-lib.org/articles/syntax.html> for details
iris %>%
mutate(across(c(Sepal.Length, Sepal.Width), round))
# across() -----------------------------------------------------------------
# Different ways to select the same set of columns
# See <https://tidyselect.r-lib.org/articles/syntax.html> for details
iris %>%
mutate(across(c(Sepal.Length, Sepal.Width), round)) |> head()
# across() -----------------------------------------------------------------
# Different ways to select the same set of columns
# See <https://tidyselect.r-lib.org/articles/syntax.html> for details
iris |>
mutate(across(c(Sepal.Length, Sepal.Width), round)) |> head()
iris
# across() -----------------------------------------------------------------
# Different ways to select the same set of columns
# See <https://tidyselect.r-lib.org/articles/syntax.html> for details
iris |>
mutate(across(c(Sepal.Length, Sepal.Width), round)) |> head()
iris <- as_tibble(iris)
# across() -----------------------------------------------------------------
# Different ways to select the same set of columns
# See <https://tidyselect.r-lib.org/articles/syntax.html> for details
iris |>
mutate(across(c(Sepal.Length, Sepal.Width), round)) |> head()
