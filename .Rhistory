str(gh_users[[1]])
str(gh_users[[1]], vec.len=3)
str(gh_users[[1]], list.len=3)
g(gh_users[[1]], list.len=3 )
str(gh_users[[1]], list.len=4)
library(tibble)
library(jsonlite)
library(dplyr)
library(listviewer)
library(tidyr)
library(tibble)
library(jsonlite)
library(dplyr)
library(listviewer)
library(tidyr)
```{r}
x <- jsonlite::read_json(the_file)
```{r}
library(tibble)
library(jsonlite)
library(dplyr)
library(listviewer)
library(tidyr)
the_dir = "bookmarks"
the_file <- paste0(the_dir, "/", "bookmarks-2023-05-24_FF.json")
the_dir
the_file
x <- jsonlite::read_json(the_file)
dir()
the_dir = "~/code/try_things_here/rrapply/bookmarks"
the_file <- paste0(the_dir, "/", "bookmarks-2023-05-24_FF.json")
the_dir
the_file
x <- jsonlite::read_json(the_file)
listviewer::jsonedit(x)     ## list(guid, title, ... children=list(...))
x
dput(x[1:9])
x1 <- x$children %>% tibble()
x1
x$children
x1 <- x$children %>% tibble()
jsonedit(x1)
x1
x$children |> tibble()
x
x$chilrend
t x$children
t=x$children
t
t |> tibble()
library(tibble)
t |> tibble()
x1
typeof(x1)
as.tibble(x1)
df1  <- data.frame(ONE=letters[1:3])
---
df1  <- data.frame(ONE=letters[1:3])
```
---
```{r}
1 + 1
2 * 2
library(rlang)
library(lobstr)
lobstr::ast(f(x, "y", 1))   # knitr complains about character
lobstr::ast(
f(g(1, 2), h(3, 4, i()))
)
lobstr::ast(
f(g(h(2)))
)
z= 2
lobstr::ast(f(z))
lobstr::ast(f(z = 2))
lobstr::ast(f(eval(z)))
lobstr::ast(f(!!z))
lobstr::ast(f(eval(z))) # does not evaluate !
lobstr::ast(f(!!z))   # evaluates !
lobstr::ast(f(z = 3))
lobstr::ast(f(eval(z))) # does not evaluate !
lobstr::ast(f(!!z))   # evaluates !
lobstr::ast(f(eval(z, envir=parent.frame(2)))) # does not evaluate !
lobstr::ast(f(eval(z, envir=parent.frame()))) # does not evaluate !
ls()
lobstr::ast(f(eval(z, envir=globalenv()))) # does not evaluate !
globalenv()
lobstr::ast(
`<-`(y, `*`(x, 10))
)
expr(mean(x, na.rm = TRUE))
expr(mean(x, na.rm = TRUE))
expr(10 + 100 + 1000)
arg = warn("boom!")
ignore = function(x) NULL
force = function(x) x
ignore(arg)
force(arg)
arg = warn("boom!")
defuse(arg)
rlang::defuse(arg)
library(tidyverse)
rlang::defuse(arg)
ignore(arg)
force(arg)
force(warn("boom!"))
rlang::defuse(arg)
rlang::expr(force(warn("boom!")))
eval(rlang::expr(force(warn("boom!"))))   # aka capture expression
force(arg)
force(warn("boom!"))
arg = warn("boom!")
ignore = function(x) NULL
force = function(x) x
ignore(arg)
force(arg)
library(sf)
install.packages("sf")
library(sf)
demo(nc, ask = FALSE, echo = FALSE)
plot(st_geometry(nc))
?st_geometry
nc
plot(st_geometry(us))
plot(st_geometry(usa))
?sf
help(pkg=sf)
help(sf)
library(dplyr)
library(tibble)
library(tidyr)
library(tibble)
classroom <- tribble(
~name,    ~quiz1, ~quiz2, ~test1,
"Billy",  NA,     "D",    "C",
"Suzy",   "F",    NA,     NA,
"Lionel", "B",    "C",    "B",
"Jenny",  "A",    "A",    "B"
)
classroom
classroom <- tribble(
~name,    ~quiz1, ~quiz2, ~test1,
"Billy",  NA,     "D",    "C",
"Suzy",   "F",    NA,     NA,
"Lionel", "B",    "C",    "B",
"Jenny",  "A",    "A",    "B"
)
classroom
library(dplyr)
library(tibble)
library(tidyr)
library(tibble)
classroom <- tribble(
~name,    ~quiz1, ~quiz2, ~test1,
"Billy",  NA,     "D",    "C",
"Suzy",   "F",    NA,     NA,
"Lionel", "B",    "C",    "B",
"Jenny",  "A",    "A",    "B"
)
classroom
classroom <- tribble(
~name,    ~quiz1, ~quiz2, ~test1,
"Billy",  NA,     "D",    "C",
"Suzy",   "F",    NA,     NA,
"Lionel", "B",    "C",    "B",
"Jenny",  "A",    "A",    "B"
)
classroom
ls()
dir()
data.frame(ID = "A",
Plan = "Ab",
Year = 2024,
Stock1_name = "stock 1",
Stock1_dollars = 100,
Stock2_name = "stock 2",
Stock2_dollars = 200)  |>
pivot_longer(cols = starts_with("Stock"), names_to = c("num", ".value"), names_sep = "_")
data.frame(ID = "A",
Plan = "Ab",
Year = 2024,
Stock1_name = "stock 1",
Stock1_dollars = 100,
Stock2_name = "stock 2",
Stock2_dollars = 200)  |>
pivot_longer(cols = starts_with("Stock"), names_to = c("num", ".value"), names_sep = "_")
data.frame(ID = "A",
Plan = "Ab",
Year = 2024,
Stock1_name = "stock 1",
Stock1_dollars = 100,
Stock2_name = "stock 2",
Stock2_dollars = 200)  |>
pivot_longer(cols = starts_with("Stock"), names_to = c("num", ".value"), names_sep = "_")
data.frame(ID = "A",
Plan = "Ab",
Year = 2024,
Stock1_name = "stock 1",
Stock1_dollars = 100,
Stock2_name = "stock 2",
Stock2_dollars = 200)  |>  pivot_longer(cols = starts_with("Stock"), names_to = c("num", ".value"), names_sep = "_")
df = data.frame(ID = "A",
Plan = "Ab",
Year = 2024,
Stock1_name = "stock 1",
Stock1_dollars = 100,
Stock2_name = "stock 2",
Stock2_dollars = 200)
df |>  pivot_longer(cols = starts_with("Stock"),
names_to = c("num", ".value"),
names_sep = "_")
df = data.frame(ID = "A",
Plan = "Ab",
Year = 2024,
Stock1_name = "stock 1",
Stock1_dollars = 100,
Stock2_name = "stock 2",
Stock2_dollars = 200)
df |>  pivot_longer(cols = starts_with("Stock"),
names_to = c("num", ".value"),
names_sep = "_")
df |>  pivot_longer(cols = starts_with("Stock"),
names_to = c("num", ".value"),
names_sep = "_")
df  %>% pivot_longer(cols = starts_with("Stock"),
names_to = c(".value", NA),
names_sep = "_",
values_transform = as.character)
df |>  pivot_longer(cols = contains("_name"),
names_to = c("Stock"))
q()
n
TODO:
# https://tomaztsql.wordpress.com/2024/03/23/little-useless-useful-r-functions-reverse-hello-world/
# Explain "hello world", using substitute?
###
#	substitute vs deparse(substitute)
###
f <- function(x) {
substitute(x)
}
g <- function(x) {
deparse(substitute(x))
}
###
#	substitute vs deparse(substitute)
###
f <- function(x) {
substitute(x)
}
g <- function(x) {
deparse(substitute(x))
}
# return string with contents of function call
g <- function(x) {
deparse(substitute(x))
}
g(x+y)
g(2 + 3)   # "x +  y"
h = function(print)
deparse(substitute(print))
h(1:10)
h(x+y)
h(2 + 3)
h = function(print) {
if (print = deparse(substitute(print)))
h = function(print) {
if (print = deparse(substitute(print))) print("works" )
h = function(print) {
if (print == deparse(substitute(print))) print("works" )
}
h("jim")
h(2)
h("hi")
h = function(print) {
z = deparse(substitute(print ))
if (z == "print") print("works")
}
h("jim")
h(2)
h("hi")
h("print")
h = function(print) {
z = deparse(substitute(print ))
if (z == "print") print("works")
}
h("jim")
h(2)
h("hi")
h("print")
h = function(print) {
z = deparse(substitute(print ))
cat(z, "\n")
if (z == "print") print("works")
}
h("jim")
h(2)
h("hi")
h("print")
h(1:10)
h(x+y)
h(2 + 3)
h = function(print) {
z = deparse(substitute(print ))
cat(z, "\n")
cat(is.character(z), "\n")
if (z == "print") print("works")
}
h("jim")
h(2)
h("hi")
h("print")
h(1:10)
h(x+y)
h(2 + 3)
e<-quote(`foo bar`)
h = function(print) {
z = deparse(substitute(print ))
cat(z, "\n")
cat(is.character(z), "\n")
if (z == "print") cat("works")
}
h("jim")
h(2)
h("hi")
h("print")
h(1:10)
"hello" == "hello"
h = function(print) {
z = deparse(substitute(print ))
cat(z, "\n")
cat(is.character(z), "\n")
cat(print == "print")
}
h("jim")
h(2)
h("hi")
h("print")
h = function(print) {
z = deparse(substitute(print ))
cat(z, "\n")
cat(is.character(z), "\n")
cat(print == "print")
if (print == "print") { print("Hello World")
} else {print("Well ...")}
}
h("jim")
h(2)
h("hi")
h("print")
h = function(print) {
z = deparse(substitute(print ))
cat(z, "\n")
cat(is.character(z), "\n")
cat(print == "print")
if (z == "print") { print("Hello World")
} else {print("Well ...")}
}
h("jim")
h(2)
h("hi")
h("print")
h = function(print) {
z = deparse(substitute(print ))
cat(is.character(z), "\n")
if (z == "print") { print("Hello World")
} else {print("Well ...")}
}
h("jim")
h(2)
h("hi")
h("print")
h(1:10)
h(print)
h("print")
h(print)
# --------------------------------
## EXPLAIN
# --------------------------------
h = function(print) {
z = deparse(substitute(print ))
cat(is.character(z), "\n")
cat(typeof(z))
if (z == "print") { print("Hello World")
} else {print("Well ...")}
}
h("jim")
h(2)
h("hi")
h("print")
h(print)
h(1:10)
h(x+y)
h(2 + 3)
"hello" == "hello"
# --------------------------------
## EXPLAIN
# --------------------------------
h = function(print) {
z = deparse(substitute(print ))
cat(is.character(z), "\n")
cat(typeof(z))
if (z[[1]] == "print") { print("Hello World")
} else {print("Well ...")}
}
h("jim")
h(2)
h("hi")
h("print")
h(print)
h("print")
h(print)
h(1:10)
h(x+y)
h(2 + 3)
# --------------------------------
## EXPLAIN
# --------------------------------
h = function(print) {
z = deparse(substitute(print ))
cat(is.character(z), "\n")
cat(typeof(z))
identical(z, "print")
if (z[[1]] == "print") { print("Hello World")
} else {print("Well ...")}
}
h("jim")
h(2)
h("hi")
# --------------------------------
## EXPLAIN
# --------------------------------
h = function(print) {
z = deparse(substitute(print ))
cat(is.character(z), "\n")
cat(typeof(z))
cat(identical(z, "print"))
if (z[[1]] == "print") { print("Hello World")
} else {print("Well ...")}
}
h("jim")
h(2)
h("hi")
h("print")
h(print)
# --------------------------------
## EXPLAIN
# --------------------------------
h = function(print) {
z = deparse(substitute(print ))
cat(z)
cat("print")
cat(is.character(z), "\n")
cat(typeof(z))
if (z[[1]] == "print") { print("Hello World")
} else {print("Well ...")}
}
h("jim")
h(2)
h("hi")
h("print")
# --------------------------------
## EXPLAIN
# --------------------------------
h = function(print) {
z = deparse(substitute(print ))
cat(z)
cat(!!z)
cat("print")
cat(is.character(z), "\n")
cat(typeof(z))
if (z[[1]] == "print") { print("Hello World")
} else {print("Well ...")}
}
h("jim")
h(2)
# --------------------------------
## EXPLAIN
# --------------------------------
library(rlang)
h = function(print) {
z = deparse(substitute(print ))
cat(z)
cat(!!z)
cat("print")
cat(is.character(z), "\n")
cat(typeof(z))
if (z[[1]] == "print") { print("Hello World")
} else {print("Well ...")}
}
h("jim")
h(2)
h("hi")
h("print")
h(print)
h(1:10)
# --------------------------------
## EXPLAIN
# --------------------------------
library(rlang)
h = function(print) {
z = deparse(substitute(print ))
cat(z)
cat("print")
if (z[[1]] == "print") { print("Hello World")
} else {print("Well ...")}
}
h("jim")
h(2)
h("hi")
h("print")
h(print)
