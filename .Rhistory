arg = warn("boom!")
defuse(arg)
rlang::defuse(arg)
library(tidyverse)
rlang::defuse(arg)
ignore(arg)
force(arg)
force(warn("boom!"))
rlang::defuse(arg)
rlang::expr(force(warn("boom!")))
eval(rlang::expr(force(warn("boom!"))))   # aka capture expression
force(arg)
force(warn("boom!"))
arg = warn("boom!")
ignore = function(x) NULL
force = function(x) x
ignore(arg)
force(arg)
library(sf)
install.packages("sf")
library(sf)
demo(nc, ask = FALSE, echo = FALSE)
plot(st_geometry(nc))
?st_geometry
nc
plot(st_geometry(us))
plot(st_geometry(usa))
?sf
help(pkg=sf)
help(sf)
library(dplyr)
library(tibble)
library(tidyr)
library(tibble)
classroom <- tribble(
~name,    ~quiz1, ~quiz2, ~test1,
"Billy",  NA,     "D",    "C",
"Suzy",   "F",    NA,     NA,
"Lionel", "B",    "C",    "B",
"Jenny",  "A",    "A",    "B"
)
classroom
classroom <- tribble(
~name,    ~quiz1, ~quiz2, ~test1,
"Billy",  NA,     "D",    "C",
"Suzy",   "F",    NA,     NA,
"Lionel", "B",    "C",    "B",
"Jenny",  "A",    "A",    "B"
)
classroom
library(dplyr)
library(tibble)
library(tidyr)
library(tibble)
classroom <- tribble(
~name,    ~quiz1, ~quiz2, ~test1,
"Billy",  NA,     "D",    "C",
"Suzy",   "F",    NA,     NA,
"Lionel", "B",    "C",    "B",
"Jenny",  "A",    "A",    "B"
)
classroom
classroom <- tribble(
~name,    ~quiz1, ~quiz2, ~test1,
"Billy",  NA,     "D",    "C",
"Suzy",   "F",    NA,     NA,
"Lionel", "B",    "C",    "B",
"Jenny",  "A",    "A",    "B"
)
classroom
ls()
dir()
data.frame(ID = "A",
Plan = "Ab",
Year = 2024,
Stock1_name = "stock 1",
Stock1_dollars = 100,
Stock2_name = "stock 2",
Stock2_dollars = 200)  |>
pivot_longer(cols = starts_with("Stock"), names_to = c("num", ".value"), names_sep = "_")
data.frame(ID = "A",
Plan = "Ab",
Year = 2024,
Stock1_name = "stock 1",
Stock1_dollars = 100,
Stock2_name = "stock 2",
Stock2_dollars = 200)  |>
pivot_longer(cols = starts_with("Stock"), names_to = c("num", ".value"), names_sep = "_")
data.frame(ID = "A",
Plan = "Ab",
Year = 2024,
Stock1_name = "stock 1",
Stock1_dollars = 100,
Stock2_name = "stock 2",
Stock2_dollars = 200)  |>
pivot_longer(cols = starts_with("Stock"), names_to = c("num", ".value"), names_sep = "_")
data.frame(ID = "A",
Plan = "Ab",
Year = 2024,
Stock1_name = "stock 1",
Stock1_dollars = 100,
Stock2_name = "stock 2",
Stock2_dollars = 200)  |>  pivot_longer(cols = starts_with("Stock"), names_to = c("num", ".value"), names_sep = "_")
df = data.frame(ID = "A",
Plan = "Ab",
Year = 2024,
Stock1_name = "stock 1",
Stock1_dollars = 100,
Stock2_name = "stock 2",
Stock2_dollars = 200)
df |>  pivot_longer(cols = starts_with("Stock"),
names_to = c("num", ".value"),
names_sep = "_")
df = data.frame(ID = "A",
Plan = "Ab",
Year = 2024,
Stock1_name = "stock 1",
Stock1_dollars = 100,
Stock2_name = "stock 2",
Stock2_dollars = 200)
df |>  pivot_longer(cols = starts_with("Stock"),
names_to = c("num", ".value"),
names_sep = "_")
df |>  pivot_longer(cols = starts_with("Stock"),
names_to = c("num", ".value"),
names_sep = "_")
df  %>% pivot_longer(cols = starts_with("Stock"),
names_to = c(".value", NA),
names_sep = "_",
values_transform = as.character)
df |>  pivot_longer(cols = contains("_name"),
names_to = c("Stock"))
q()
n
TODO:
f <- function(x) {
substitute(x)
}
g <- function(x) {
deparse(substitute(x))
}
f <- function(x) {
substitute(x)
}
g <- function(x) {
deparse(substitute(x))
}
g <- function(x) {
deparse(substitute(x))
}
g(x+y)
g(2 + 3)   # "x +  y"
h = function(print)
deparse(substitute(print))
h(1:10)
h(x+y)
h(2 + 3)
h = function(print) {
if (print = deparse(substitute(print)))
h = function(print) {
if (print = deparse(substitute(print))) print("works" )
h = function(print) {
if (print == deparse(substitute(print))) print("works" )
}
h("jim")
h(2)
h("hi")
h = function(print) {
z = deparse(substitute(print ))
if (z == "print") print("works")
}
h("jim")
h(2)
h("hi")
h("print")
h = function(print) {
z = deparse(substitute(print ))
if (z == "print") print("works")
}
h("jim")
h(2)
h("hi")
h("print")
h = function(print) {
z = deparse(substitute(print ))
cat(z, "\n")
if (z == "print") print("works")
}
h("jim")
h(2)
h("hi")
h("print")
h(1:10)
h(x+y)
h(2 + 3)
h = function(print) {
z = deparse(substitute(print ))
cat(z, "\n")
cat(is.character(z), "\n")
if (z == "print") print("works")
}
h("jim")
h(2)
h("hi")
h("print")
h(1:10)
h(x+y)
h(2 + 3)
e<-quote(`foo bar`)
h = function(print) {
z = deparse(substitute(print ))
cat(z, "\n")
cat(is.character(z), "\n")
if (z == "print") cat("works")
}
h("jim")
h(2)
h("hi")
h("print")
h(1:10)
"hello" == "hello"
h = function(print) {
z = deparse(substitute(print ))
cat(z, "\n")
cat(is.character(z), "\n")
cat(print == "print")
}
h("jim")
h(2)
h("hi")
h("print")
h = function(print) {
z = deparse(substitute(print ))
cat(z, "\n")
cat(is.character(z), "\n")
cat(print == "print")
if (print == "print") { print("Hello World")
} else {print("Well ...")}
}
h("jim")
h(2)
h("hi")
h("print")
h = function(print) {
z = deparse(substitute(print ))
cat(z, "\n")
cat(is.character(z), "\n")
cat(print == "print")
if (z == "print") { print("Hello World")
} else {print("Well ...")}
}
h("jim")
h(2)
h("hi")
h("print")
h = function(print) {
z = deparse(substitute(print ))
cat(is.character(z), "\n")
if (z == "print") { print("Hello World")
} else {print("Well ...")}
}
h("jim")
h(2)
h("hi")
h("print")
h(1:10)
h(print)
h("print")
h(print)
h = function(print) {
z = deparse(substitute(print ))
cat(is.character(z), "\n")
cat(typeof(z))
if (z == "print") { print("Hello World")
} else {print("Well ...")}
}
h("jim")
h(2)
h("hi")
h("print")
h(print)
h(1:10)
h(x+y)
h(2 + 3)
"hello" == "hello"
h = function(print) {
z = deparse(substitute(print ))
cat(is.character(z), "\n")
cat(typeof(z))
if (z[[1]] == "print") { print("Hello World")
} else {print("Well ...")}
}
h("jim")
h(2)
h("hi")
h("print")
h(print)
h("print")
h(print)
h(1:10)
h(x+y)
h(2 + 3)
h = function(print) {
z = deparse(substitute(print ))
cat(is.character(z), "\n")
cat(typeof(z))
identical(z, "print")
if (z[[1]] == "print") { print("Hello World")
} else {print("Well ...")}
}
h("jim")
h(2)
h("hi")
h = function(print) {
z = deparse(substitute(print ))
cat(is.character(z), "\n")
cat(typeof(z))
cat(identical(z, "print"))
if (z[[1]] == "print") { print("Hello World")
} else {print("Well ...")}
}
h("jim")
h(2)
h("hi")
h("print")
h(print)
h = function(print) {
z = deparse(substitute(print ))
cat(z)
cat("print")
cat(is.character(z), "\n")
cat(typeof(z))
if (z[[1]] == "print") { print("Hello World")
} else {print("Well ...")}
}
h("jim")
h(2)
h("hi")
h("print")
h = function(print) {
z = deparse(substitute(print ))
cat(z)
cat(!!z)
cat("print")
cat(is.character(z), "\n")
cat(typeof(z))
if (z[[1]] == "print") { print("Hello World")
} else {print("Well ...")}
}
h("jim")
h(2)
library(rlang)
h = function(print) {
z = deparse(substitute(print ))
cat(z)
cat(!!z)
cat("print")
cat(is.character(z), "\n")
cat(typeof(z))
if (z[[1]] == "print") { print("Hello World")
} else {print("Well ...")}
}
h("jim")
h(2)
h("hi")
h("print")
h(print)
h(1:10)
library(rlang)
h = function(print) {
z = deparse(substitute(print ))
cat(z)
cat("print")
if (z[[1]] == "print") { print("Hello World")
} else {print("Well ...")}
}
h("jim")
h(2)
h("hi")
h("print")
h(print)
library(tibblify)
library(constructive)
install.packages(c("tibblify", "constructive"))
x =  list(
a=list(id = 1, name ="one"),
b=list(id= 2,name="two")
)
library(tibblify)
library(constructive)
x =  list(
a=list(id = 1, name ="one"),
b=list(id= 2,name="two")
)
y =  list(
list(id = 1, name ="one"),
list(id= 2,name="two")
)
spec <- tspec_df(
id = tib_int("id"),
name = tib_chr("name")
)
tibblify(x, spec)
load_all()
library(sdtmchecks)
library(sdtmchecks)
test_that("Function returns true when no errors are present", {
AE <- data.frame(
USUBJID = 1:7,
AETERM = 1:7,
AESTDTC = 1:7,
AEACNOTH = 1:7,
AEACNOT1 = 1:7,
AEACNOT2 = 1:7,
AESPID = "FORMNAME-R:13/L:13XXXX"
)
expect_true(check_ae_aeacnoth(AE))
})
library(testthat)
test_that("Function returns true when no errors are present", {
AE <- data.frame(
USUBJID = 1:7,
AETERM = 1:7,
AESTDTC = 1:7,
AEACNOTH = 1:7,
AEACNOT1 = 1:7,
AEACNOT2 = 1:7,
AESPID = "FORMNAME-R:13/L:13XXXX"
)
expect_true(check_ae_aeacnoth(AE))
})
test_that("Function returns true when no errors are present", {
AE <- data.frame(
USUBJID = 1:7,
AETERM = 1:7,
AESTDTC = 1:7,
AEACNOTH = 1:7,
AEACNOT1 = 1:7,
AEACNOT2 = 1:7,
AESPID = "FORMNAME-R:13/L:13XXXX"
)
expect_true(check_ae_aeacnoth(AE))
})
check_ae_aeacnoth(AE)
AE <- data.frame(
USUBJID = 1:7,
AETERM = 1:7,
AESTDTC = 1:7,
AEACNOTH = 1:7,
AEACNOT1 = 1:7,
AEACNOT2 = 1:7,
AESPID = "FORMNAME-R:13/L:13XXXX"
)
check_ae_aeacnoth(AE)
all_rec<-run_all_checks(metads=sdtmchecksmeta,
priority=c("High","Medium","Low"),
type=c("ALL", "ONC", "COVID", "PRO"))
str(all_rec, max.level=1)
AE <- data.frame(
USUBJID = 1:7,
AETERM = 1:7,
AESTDTC = 1:7,
AEACNOTH = 1:7,
AEACNOT1 = 1:7,
AEACNOT2 = 1:7,
AESPID = "FORMNAME-R:13/L:13XXXX"
)
all_rec<-run_all_checks(metads=sdtmchecksmeta,
priority=c("High","Medium","Low"),
type=c("ALL", "ONC", "COVID", "PRO"))
usethis::use_tidy_style()
yes
1
1
q()
n
