#
#	NOTES:	alt-f4  to remove window displaying curve.
#					xname tells function which variable to plot over.
#					Likelihood function:  given the data, which p fits best?
#
#	Given thros (n), successes(k), find mass density for give prob
f  <- function (n, k, prob) {
dbinom(x=k,
size=n,
prob=prob)
}
install.packages("kableExtra")
#
#	NOTES:	alt-f4  to remove window displaying curve.
#					xname tells function which variable to plot over.
#					Likelihood function:  given the data, which p fits best?
#
#	Given throws (n), sucesses(k), find mass density for give prob
f  <- function (n, k, prob) {
dbinom(x=k,
size=n,
prob=prob)
}
f(n=2,k=0,prob=1/2)
curve(f(n=200,k=100,p), 0,  1, xname="p")
curve(f(n=200,k=10,p), 0,  1, xname="p")
install.packages("ggpubr")
library(ggplot2)
pars()
par()
unlist(par())
as_tibble(unlist(pars()))
as_tibble(unlist(par())
)
par()
unlist(par())
x =unlist(par())
typeof(x)
names(x)
head(x)
as_tibble(name=names(x), value=x)
x
as_tibble(name=names(x), value=unname(x))
tibble(name=names(x), value=x)
x <- jitter(mpg$hwy)
y <- jitter(mpg$cty)
z <- factor(mpg$drv)
plot(x, y, col = z)
legend("topleft", legend = levels(z), col = 1:nlevels(z), pch = 1, title = "Drive")
line(x,y, col=z)
# Create some variables
x <- 1:10
y1 <- x*x
y2  <- 2*y1
# Gives first line
plot(x, y1, type = "b", frame = FALSE, pch = 19,
col = "red", xlab = "x", ylab = "y")
data(mpg, package = "ggplot2")
str(mpg)
x <- jitter(mpg$hwy)
y <- jitter(mpg$cty)
z <- factor(mpg$drv)
plot(x, y, col = z)
legend("topleft", legend = levels(z), col = 1:nlevels(z), pch = 1, title = "Drive")
line(x,y, col=z)
f <- function(N, k) {
curve(f(N, k, prob),
from = 0,
to = 1,
col =5,
lwd = 3,
xname = "prob"
)
}
f(N=100, k=50)
f <- function(N, k) {
curve(f(N, k, prob),
from = 0,
to = 1,
col =5,
lwd = 3,
xname = prob
)
}
f(N=100, k=50, "x")
N=100
k=50
N=10
k=5
f <- function(N, k, prob="x") {
curve(f(N, k, prob),
from = 0,
to = 1,
col =5,
lwd = 3,
xname = prob
)
}
f(N=100, k=50)
N=100
k=50
N=10
k=5
f <- function(N, k, prob="x") {
curve(f(N, k, prob),
from = 0,
to = 1,
col =5,
lwd = 3,
xname = prob
)
}
f(N=100, k=50)
f <- function(size=N, x=k, prob){
dbinom(x=x,
size=N,
prob=prob)
}
draw <- function(N, k, prob="x") {
curve(f(N, k, prob),
from = 0,
to = 1,
col =5,
lwd = 3,
xname = prob
)
}
draw(N=100, k=50)
N=100
k=50
prob="x"
curve(f(N, k, prob),
from = 0,
to = 1,
col =5,
lwd = 3,
xname = prob
)
f
f <- function(size=N, x=k, prob){
dbinom(x=x,
size=N,
prob=prob)
}
formals(dbinom)
N=1000
k=500
dbinom(x=x,
size=N,
prob=prob)
dbinom(x=k,
size=N,
prob=prob)
N=1000
k=500
prop=.5
dbinom(x=k,
size=N,
prob=prob)
formals(dbinom)
args(dbinom)
is.numeric((N))
vapply(c(N,k,prop), is.numeric, T)
dbinom(x=k,
size=N,
prob=prob)
?dbinom
dbinom(x=c(500),
size=N,
prob=prob)
N=1000
k=500
prop=.5
is.numeric((N))
vapply(c(N,k,prop), is.numeric, T)
dbinom(x=c(500),
size=N,
prob=prob)
dbinom(x=c(500),
size=N,
prob=c(.5))
dbinom(x=c(500),
size=N,
prob=c(.1, .5))
curve(f(N, k, prob),
from = 0,
to = 1,
col =2,
lwd = 3,
xname = "prob"
)
curve(f(N, k, prob),
from = 0,
to = 1,
col =2,
lwd = 3,
xname = "prob"
)
N=100
k=10
curve(f(N, k, prob),
from = 0,
to = 1,
col =2,
lwd = 3,
xname = "prob"
)
k=90
curve(f(N, k, prob),
from = 0,
to = 1,
col =2,
lwd = 3,
xname = "prob"
)
curve(f(N, k, prob),
from = 0,
to = 1,
col =3,
lwd = 3,
xname = "prob"
)
curve(f(N, k, prob),
from = 0,
to = 1,
col =4,
lwd = 1,
xname = "prob"
)
curve(f(N, k, prob),
from = 0,
to = 1,
col =4,
lwd = 1,
lty = 2,
xname = "prob"
)
curve(f(N, k, prob),
from = 0,
to = 1,
col =4,
lwd = 1,
lty = 3,
xname = "prob"
)
curve(f(N, k, prob),
from = 0,
to = 1,
col =4,
lwd = 1,
lty = 4,
xname = "prob"
)
curve(f(N, k, prob),
from = 0,
to = 1,
col =4,
lwd = 1,
lty = 9,
xname = "prob"
)
curve(f(N, k, prob),
from = 0,
to = 1,
col =4,
lwd = 1,
lty = 12,
xname = "prob"
)
curve(f(N, k, prob),
from = 0,
to = 1,
col =3,
lwd = 1,
lty = 1
xname = "prob",
curve(f(N, k, prob),
from = 0,
to = 1,
col =3,
lwd = 1,
lty = 1,
xname = "prob",
add = T
)
curve(f(N, k, prob),
from = 0,
to = 1,
col =3,
lwd = 1,
lty = 1,
xname = "prob",
add = T
)
N=100
k=90
curve(f(N, k, prob),
from = 0,
to = 1,
col =4,
lwd = 1,
lty = 12,
xname = "prob"
)
k=10
curve(f(N, k, prob),
from = 0,
to = 1,
col =3,
lwd = 1,
lty = 1,
xname = "prob",
add = T
)
k=12
curve(f(N, k, prob),
from = 0,
to = 1,
col =5,
lwd = 3,
xname = "prob",
add = T
)
curve(f(N, k, prob),
from = 0,
to = 1,
col =5,
lwd = 1,
xname = "prob",
add = T
)
curve(f(N, k, prob),
from = 0,
to = 1,
col =3,
lwd = 1,
lty = 1,
xname = "prob",
add = T
)
curve(f(N, k, prob),
from = 0,
to = 1,
col =5,
lwd = 3,
xname = "prob",
add = T
)
k=12
curve(f(N, k, prob),
from = 0,
to = 1,
col =5,
lwd = 1,
xname = "prob",
add = T
)
z = c("k=500", "k=100", "k=990")
levels(z)
legend("topleft", legend = z, col = 1:nlevels(z), pch = 1, title = "k successes")
N=25
k=9
curve(f(N, k, prob),
from = 0,
to = 1,
col =5,
lwd = 1,
xname = "prob",
add = T
)
f <- function(size=N, k, prob){
dbinom(x=k,
size=N,
prob=prob)
}
N=100
k=90
prop=.5
##
## dbinom(x=c(500), size=N, prob=c(.1, .5))
##  Try lty=2,3,4....  "line type"
##  Fix N, and vary k.   Each k adds new curve.
curve(f(N, k, prob),
from = 0,
to = 1,
col =4,
lwd = 1,
lty = 12,
xname = "prob"
)
k=10
curve(f(N, k, prob),
from = 0,
to = 1,
col =3,
lwd = 1,
lty = 1,
xname = "prob",
add = T
)
curve(f(N, k, prob),
from = 0,
to = 1,
col =5,
lwd = 3,
xname = "prob",
add = T
)
N=25
k=9
curve(f(N, k, prob),
from = 0,
to = 1,
col =5,
lwd = 1,
xname = "prob",
add = T
)
z = c("k=500", "k=100", "k=990")
levels(z)
legend("topleft", legend = z, col = 1:nlevels(z), pch = 1, title = "k successes")
k=5
curve(f(N, k, prob),
from = 0,
to = 1,
col =5,
lwd = 1,
xname = "prob",
add = T
)
N=5
k=2
curve(f(N, k, prob),
from = 0,
to = 1,
col =5,
lwd = 1,
xname = "prob",
add = T
)
N=5
k=2
curve(f(N, k, prob),
from = 0,
to = 1,
col =5,
lwd = 1,
xname = "prob"
)
```
f <- function(size=N, k, prob){
pbinom(x=k,
size=N,
prob=prob)
}
N=100
k=90
prop=.5
##  Try lty=2,3,4....  "line type"
##  Fix N, and vary k.   Each k adds new curve.
curve(f(N, k, prob),
from = 0,
to = 1,
col =4,
lwd = 1,
lty = 12,
xname = "prob"
)
?pbinom
curve(dbinom(x=1, size=5, prob), from=0, to=1, xname="prob")
curve(dbinom(x=0, size=5, prob), from=0, to=1, xname="prob")
curve(dbinom(x=2, size=5, prob), from=0, to=1, xname="prob")
options(continue)
options(continue="")
options(continue=" ")
curve(dbinom(x=2, size=5, prob), from=0, to=1, xname="prob")
?continue
?options
getOption(continue)
getOption("continue")
x =
sine(3) +
q
option(continue=">")
options(continue= ">")
y =
y +
adsfkj
x =
sine(3) +
# install.packages("devtools")
devtools::install_github("lionel-/codegrip")
# install.packages("devtools")
devtools::install_github("lionel-/codegrip")
devtools:::run_examples()
?run_examples
devtools:::run_examples(as.package(devtools))
devtools:::run_examples(as.package("devtools"))
devtools::install_github("rstudio/addinexamples", type = "source")
