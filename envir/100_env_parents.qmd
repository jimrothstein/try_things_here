
## Given nested functions, find set of environments beginning with current environment
### sys.parent() works opposite direction to nframe
```{r sys_parent}
## sys.parent() is helper function, by itself is not very useful.

## RECALL: frame number 0 is global and increase by +1 for each level down.

# ‘sys.parent’ returns the
#      number of the parent frame if ‘n’ is
#      1 (the default), the grandparent if
#      ‘n’ is 2, and so on.

## INPUT:  n, which means number frames to go BACK.
##          o is current , 1 would be parent, 2 grandparent


sys.parent(n = 0)
sys.parent(n = 1)

f <- function(n = NULL) {
  sys.parent(n)
}

f(0)  # 1   # current env
f(1)  # 0   # but one level up, is global
f(2)  # 0 

```
```r
f = function(n = NULL){
  g=function(n = NULL){
    sys.parent(n)
    }
  g(n)
  }
f(0) # 2
f(1) # 1
f(2) # 0

```

```r
## USEFUL, work with actual environments  
# To get environment of ancestor frame

# g returns envir
# n=1 is parent, n=2 grandparetn

x = 0
g <- function(n = NULL) {
  x = 10
  sys.frame(sys.parent(n))
}

ls(g(n = 0)) # current env

# find x in various environments
get("x", envir = g(n=0)) # 10, in current
get("x", envir = g(n=1)) # 1, in global

g(1) # parent env (global)

```


```{r h}
## Return Env
h <- function(n = NULL) {
  g(n)
}
h(n = 0) # inner most
h(n = 1) # up 1 frame (parent)
h(n = 2) # up 2 frames (grandparent)
```

####   USE CASE, use hierarchy to report z in each frame.
```{r use_case}
z <- 0

f <- function() {
  z <- 10

  list(
    get("z"),
    get("z", envir = sys.frame(which = -1))
  )
  #             get("z", envir=sys.frame(which=-2))
}

f()
```


