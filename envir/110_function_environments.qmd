# https://stackoverflow.com/questions/44427752/distinct-enclosing-environment-function-environment-etc-in-r
You have to distinguish 4 different environments when talking about a function:

-    the binding environment is the environment where the function is found (i.e. where its name exists). This is where the actual binding of an object to its name is done. find() gives you the binding environment.

-     the enclosing environment is the environment where the function is originally created. This is not necessarily the same as the binding environment (see examples below). environment() gives you the enclosing environment.

-    the local environment is the environment within the function. You call that the execution environment.

-     the parent frame or calling environment is the environment from where the function was called.

Why does this matter

Every environment has a specific function:

    the binding environment is the environment where you find the function.
    the local environment is the first environment where R looks for objects.
    the general rule is: if R doesn't find an object in the local environment, it then looks in the enclosing environment and so on. The last enclosing environment is always emptyenv().
    the parent frame is where R looks for the value of the objects passed as arguments.


# enclosing env   for stats::sd
```r
ls()  # should be character(0)

environment(sd) # <environment: namespace:stats>
find("sd") # [1] "package:stats",  where symbol sd located

# change 
environment(sd)  <- globalenv()
environment(sd) # <environment: R_GlobalEnv>
find("sd") # two! [1] ".GlobalEnv"    "package:stats"

rm(sd)
ls()  # character(0)
environment(sd) # <environment: namespace:stats>


# enclosing vs binding
f <- sd
environment(f) # <environment: namespace:stats>  Enclosing environment , where function originally created
environment(sd) # <environment: namespace:stats>  

identical(f, sd)  # TRUE

# where is f?
ls()  # global !      because f is bound to function in global_env





