---
title: "005_parent.frame()"
author: "jim"
date: 2020-17-23T21:13:14-05:00
categories: ["R"]
tags: ["R Markdown", "plot", "regression"]
---

set `error` option, get
```r
options(error = NULL)    # set error (normally not set)
getOption("error")       # NULL
```

------------------------  CALL STACk

debug g
which = 0 global
1 = f execution frame
2 = g execution frame

If in g's execution frame, has x been set?
get("x", envir=sys.frame(which = 0)) # global
get("x", envir=sys.frame(which = 1)) # f's execution frame 
get("x", envir=sys.frame(which = 2)) # g's execution frame ,  or just get("x")

Count frames back (if in g's execution environment)
get("x", envir=sys.frame(which = -1 )) # f's execution frame
get("x", envir=sys.frame(which = -2 )) # global 
```r
x  <- 0
g  <- function() { x  = 100 }
f  <- function() {
  x  <- 10
  g()
}

debugonce(g)
f()
```

------------------------  STOP, do you understand the above?? 

WHY use?   quickly confusing
parent.frame(n = 1) ; returns env,  default 1
sys.parent(n)  returns frame # ; n is number of frames back from current execution frame
```{r simple}
parent.frame()    # global env

f  <- function() print(parent.frame())  
f()  # also R_GlobalEnv

x  <- 0
g  <- function() { x  = 100 }
f  <- function() {
  x  <- 10
  g()
}

debugonce(g)
f()
```

## OR, rlang::caller_env()
```{r}
library(rlang)
f <- function() print(caller_env())  ## global_env WHY?
f()

g <- function() caller_env()     ## global_env
g()
```

## Calling env of g is env for f
```{r not_global}

g  <- function() print(parent.frame())

f <- function() g()
f()
```

## parent.frame() example
  *  https://stackoverflow.com/questions/28641395/what-is-parent-frame-of-r
  *  parent.frame() returns <env>, 
```{r simple_parent_frame}
parent.frame()    ## global_env()
print(parent.frame()) ## also global_env()
```
```r
x=0
f = function() {
x=10
g = function() {
 print(sys.nframe())
 }
 g()
 }


## what is calling env for parentls() ?
```{r}
 parentls <- function() {
    cat("printls called from: ", "\n")
    print(parent.frame())
#    ls(envir=parent.frame())

    }
?parent.frame
parentls()
a<-function() {
    cat("a's execution envirnmemnt is: ")
    print(environment())
    x <- 5
    parentls()
}

b <- function() {
    z <- 10
    parentls()
 }

a()
b()

environment(a)
parent.env(environment(a))
```

## attach/detact pkg
```{r}
search()
pkg = paste0("pharmaverse", "adam")
pkg
# error:  library(pkg)
library(pkg, character.only = T)


library(pharmaverseadam)   ## works
detach(name = pharmaverseadam, character.only = T)
detach(package:pharmaverseadam)
?detach

```


Repeat, also find the frames, env
-   
-  Global takes value 0
-  f , one level down, takes 1
-  g,  two levels down, takes 2
-  environment(), active env
-  environment(h), env where h is defined
-  parent.frame(), calling env

```{r nframe_adv}

g  <- function() {
  cat("g:  nframe = ", sys.nframe() , "\n")
  cat("g def env:  ")
  print(environment(g))  # g is defined in Global

  cat("g calling env: ")
  print(parent.frame()) #  where called (inside f) 

}

f <- function() {
  cat("f: nframe = ", sys.nframe() , "\n")
  cat("f def env:  ")
  print(environment(f))

  cat("f active env:  ")
  print(environment())
  cat("\n")
  g()
}
cat("nframe = ", sys.nframe() , "\n") # 0
f()
cat("nframe = ", sys.nframe() , "\n")

```

### NEED?
```{r}
# objects in parent.frame (calling env)
parentls <- function() {
  ls(envir = parent.frame())
}

a<-function() {
    x <- 5
    parentls()
}

b <- function() {
    z <- 10
    parentls()
 }

a() # objects in a's environment
b()
parentls()
```


AAA Example:   objects in calling env() (or parent.frame())
https://stackoverflow.com/questions/28641395/what-is-parent-frame-of-r
```{r}
# objects in parent.frame (calling env)
parentls <- function() {
  ls(envir = parent.frame())
}

a<-function() {
    x <- 5
    parentls()
}

b <- function() {
    z <- 10
    parentls()
 }

a() # objects in a's environment
b()
parentls()
```

AAA How many levels down ?  0=GlobalEnv
```{r nframe}
parentls <- function() {
  cat("nframe = ", sys.nframe() , "\n")
}


a  <- function() {
  cat("nframe = ", sys.nframe() , "\n")
  b()
}

b   <- function(){ 
  cat("nframe = ", sys.nframe() , "\n")
  c()
}

c  <- function(){ 
  cat("nframe = ", sys.nframe() , "\n")
}


cat("nframe = ", sys.nframe() , "\n")
a() # objects in a's environment

f  <- function() a()
f()
```
recursive!
sys.nframe()
```{r loop, eval=FALSE   }
a  <- function() {
  if (sys.nframe() == 9) return()
  cat("nframe = ", sys.nframe() , "\n")
  a()
}
a()
knitr::knit_exit()
```


