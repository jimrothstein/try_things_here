---
title: 9010_namespace_example_admiral
format:
  html:
    embed-resources: true
    toc: true
execute:
  enabled: false   # do not execute chunks
editor_options: 
  chunk_output_type: console
---

Admiral Namespaces Collect examples here

::: very_small
very small?
:::

::: small
small?
:::

-   **Note** that lazy-loaded datasets are not in the packageâ€™s namespace so need to be accessed via ::, e.g. survival::survexp.us.

Questions
search() returns character vectors of attached packages.  Under the hood, what is the structure?   environments, namespaces, ...?

- If I am looking for dataset and do not know the pharmaverse package,  can I find it without loading and attaching all packages?

## List all datasets in `pharmaversesdtm`
```{r}
data(package = "pharmaversesdtm")
```


# NOTE:   "pharmaversesdtm"  is attached, not loaded. 
```{r}
search()
(.packages())   # currently attached
"pharmaversesdtm" %in% loadedNamespaces()   # FALSE
```

### Check the version (in memory)
```{r}
getNamespaceVersion("admiral")  # v 1.1.1
```


## Reverse question:   given a dataset, find the package ?    (Without loading, attaching?)

getAnywhere() fails because pkg is not yet loaded.
```{r}

getAnywhere(ae)   # no object
getAnywhere("ae")   # no object

```

### Use symbol, `ns` (I can't spell pharmaversdtm)
```{r}
ns = as.symbol("pharmaversesdtm")

# easier to type
isNamespaceLoaded(ns)     # FALSE
isNamespaceLoaded("pharmaversesdtm")   # FALSE
```



###  Is `ae` exported?  Is `ae` inside the NS?   in associated environment?
### get pkg namespace

-   asNamespace , returns \<environment: namespace:stats\>
-   as.environment, must include package: , returns \<environment: package:stats\> + attrs

```{r}
asNamespace(ns)
as.environment(ns)  # error
as.environment("package:stats") # works
```

### getNamespace, returns environment

```{r}
library(pkgload)
ls(getNamespace("pharmaversesdtm"))   # no ae in ns

# exported?  # error, not on search list
ls(package:pharmaversesdtm)

# imported?
getNamespaceImports("pharmaversesdtm")   # not here


```

### objects in NameSpace

When lazyLoad on, datasets DO NOT appear in NS

```{r}
ls(getNamespace("dplyr"))  # works, getNameSPace returns environment

## Need better way ...
ls(getNamespace("admiral")) == "count_vals"  # T
getAnywhere("count_vals")

```

### is object in ns?

```{r}
z=ls(getNamespace("admiral"))

c("slice_derivation") %in% z   # TRUE
```

## unload NS

unloadNamespace- forces; first it detach(NS)

```{r}

?pkgload::unload   # NS, pkg

?unloadNamespace
unloadNamespace("stats")   # error, b/c needed by others


loadNamespace("admiral")
unloadNamespace("admiral")
"admiral" %in% loadedNamespaces()  # check

?pkgload::unload

```

## Datasets (mostly)

### Find datasets data(), class packageIRQ

```{r}
# returns obj of class packageIRQ
data() |> class()

# data in one package
data(package = "tidyr")

# data in one package (not loaded)
isNamespaceLoaded("broom")  # F
data(package = "broom")
isNamespaceLoaded("broom") # F
```

### Find all 'loaded' ds? means ...?

so far, only getAnywhere("ae") finds ds 'ae' in pkg (pharamaversesdtm)

```{r}
?getAnywhere
getAnywhere("mtcars")$where   # where won't print the ds
getAnywhere("ae")$where
getAnywhere("ae")$visible

```

### compare: data("ae") vs pharamaversdtm::ae

if pkg loaded and attached, easy to find "ae"

```{r}
search()
library("pharmaversesdtm")  # makes it easy
isNamespaceLoaded("pharmaversesdtm")
unloadNamespace("pharmaversesdtm")

ae

# is in environment
"ae" %in% ls(as.environment("package:pharmaversesdtm")) #T

"ae" %in% ls(as.environment("package:pharmaversesdtm"))  #T

## but if you unload
unloadNamespace("pharmaversesdtm")
search()
pharmaversesdtm::ae   # loads, not attach pkg;  still works
z = pharmaversesdtm::ae
z

ae   # error
"ae" %in% ls(as.environment("package:pharmaversesdtm"))  # error

```

## unload pkg

```{r}

```

### ds in pkg; NOT 'exported', put into data/

```{r}
data()   # all loaded ds
data(package = "admiral")  # ds in package admiral; will NOT load NS admiral
ls(getNamespace("admiral"))   # will load NS admiral, ~ 176 objects


isNamespaceLoaded("admiral")
unloadNamespace("admiral")
data("admiral_adsl")   # not found
data("ae")  # not found



# ae is dataset in pharmaversesdtm, in /data
library(pharmaversesdtm)  # must be loaded
ae   # found it
getAnywhere("ae")   # works

## pharamaversesdtm does NOT export much;  data/ is not called 'exported'
c("ae") %in% getNamespaceExports("pharmaversesdtm") # F

# but "ae" is in data/
str(data(package = "pharmaversesdtm"))
c("ae") %in% data(package = "pharmaversesdtm")$results

# because uses IQR format
z=data(package = "pharmaversesdtm")
z |> class()   # packageIQR
"ae" %in% z   # WHY FALSE?
"ae" %in% z$result   # NOW it is true!


ls(package:stats)
ls(package:admiral)   # admiral must be on search()


ls(ns:stats)
ls(namespace:stats)
ns:stats
namespace("stats")
ls(imports:stats)

z=getNamespaceImports("admiral")
class(z)
```

## attach ds to search path; to see all its columns

```{r}
search()
base::attach(mtcars)
search()
```

## probe package, imports, exports (seems to match file NAMESPACE)

```{r}
getNamespaceImports("stats")   # list
getNamespaceExports("stats")

getNamespaceImports("admiral")
getNamespaceExports("admiral")

```


## CASE: pharmaversesdtm
Recently, we switched from data(ds) to pharmaversdtm::ds.
I wanted understand how datasets get made available.
What follows may be orthogonal (no overlap, useless) to what we do, but perhaps might be reference for future.


First,  using library or devtools::load_all places makes datasets (in data/) available for use.
So we do not really need to do more.
```{r}
library("pharmaversesdtm")
ae
dm
```

Before go further, here are tools that will useful.

##  remove pkg and its NS ------------------------ 
```{r}
unloadNamespace("pharmaversesdtm")
search()
isNamespaceLoaded("pharmaversesdtm")
ae  # not found
vs
```

##  ------------------------ 

##  Now that pharamversdtm is not present
##  loads , does not attach pkg ----------------------------
```{r}
pharmaversesdtm::ae
```

# if you like functional form, works
`::`(pharmaversesdtm, ae)
?`::`

## Before using pharamversesdtm::ae, we used data(ae)
```{r}
unloadNamespace("pharamversdtm")
data(ae)

# ae available
head(ae)
```

## Functional approach
```{r}
ds = "ae"
ds = "dm"

call("`::`", "pharmaversesdtm", sym(ds))

eval(call(`::`, "pharmaversesdtm", sym(ds)))

```

## Break it down
# Assemble a symbol from a string
```{r}
var <- "foo"
sym(var)   # foo

# Assemble a call from strings, symbols, and constants
call("mean", sym(var), na.rm = TRUE)

ds = "ae"
ds = "dm"
# works

call("print", sym(ds))
eval(call("print", sym(ds)))
```

## Vectorize
```{r}
?`::`
call("::", "pharmaversedtm", sym(ds))
eval(call("::", "pharmaversesdtm", sym(ds)))


f = function(ds) { call("::", "pharmaversesdtm", ds)}
eval(f("ae"))

z=eval(lapply(c("ae", "dm"), f))
eval(z[[1]])
eval(z)


# fails
`::`(pharmaversesdtm, ae, ts)
sapply(c("ae", "ts"), `::`pharmaversesdtm)

data(package = "pharmaversesdtm")  # no attach

##  ------------------------ 

## continue with  ------------------------ 
```{r}
getAnywhere("ae")$where
getAnywhere("ae")$visible  # T

search()
as.environment("package:pharmaversesdtm")   # package req'd
ls(as.environment("package:pharmaversesdtm"))  # lists "ae"
"ae" %in% ls(as.environment("package:pharmaversesdtm"))  #T


getNamespace("pharmaversesdtm")  # no "package:", returns envir)
ls(getNamespace("pharmaversesdtm")) # get_terms
ls(envir=getNamespace("pharmaversesdtm"))
get_terms


getNamespaceExports("pharmaversesdtm") # no exports  character(0)

# easy way to get NS
asNamespace("pharmaversesdtm")
as.env
# WHY FALSE?
"ae" %in% ls(getNamespace("pharmaversesdtm")) #F

```

## Useful?
```{r}
f = function(dataset, field) str(as.list(match.call()))
f(mtcars, cyl)

g = function(x,y ) list(match.call())
g(3)

```
