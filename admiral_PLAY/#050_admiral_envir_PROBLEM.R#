library(tibble)
library(admiral)
library(dplyr)

test_lb <- tribble(
  ~USUBJID, ~PARAMCD, ~AVAL, ~PARAM, ~VISIT,
  "P01", "WBC", 33, "Leukocyte Count (10^9/L)", "CYCLE 1 DAY 1",
  "P01", "WBC", 38, "Leukocyte Count (10^9/L)", "CYCLE 2 DAY 1",
  "P01", "LYMLE", 0.90, "Lymphocytes (fraction of 1)", "CYCLE 1 DAY 1",
  "P01", "LYMLE", 0.70, "Lymphocytes (fraction of 1)", "CYCLE 2 DAY 1"
)

my_fn <- function(data_in){
  
  std_ranges <- tibble(
    ANRLO_LYMPHLS = 1,
    ANRHI_LYMPHLS = 4.8
  )
  
  derive_param_wbc_abs(
    dataset = data_in,
    by_vars = exprs(USUBJID, VISIT),
    set_values_to = exprs(
      PARAMCD = "LYMPH",
      PARAM = "Lymphocytes Abs (10^9/L)",
      DTYPE = "CALCULATION",

    # error on next line: does not see std_ranges
      ANRLO = !!std_ranges$ANRLO_LYMPHLS,
      ANRHI = !!std_ranges$ANRHI_LYMPHLS,
    ),
    get_unit_expr = extra/ct_unit(PARAM),
    wbc_code = "WBC",
    diff_code = "LYMLE",
    diff_type = "fraction"
  )
}
my_fn(test_lb)

derive_param_wbc_abs
function (dataset, by_vars, set_values_to, get_unit_expr, wbc_unit = "10^9/L", 
    wbc_code = "WBC", diff_code, diff_type = "fraction") 
{
    assert_vars(by_vars)
    assert_data_frame(dataset, required_vars = exprs(!!!by_vars, 
        PARAMCD, AVAL))
    assert_character_scalar(wbc_code)
    assert_character_scalar(diff_code)
    assert_character_scalar(diff_type, values = c("percent", 
        "fraction"))
    get_unit_expr <- assert_expr(enexpr(get_unit_expr))
    assert_character_scalar(wbc_unit)
    by_vars_str <- vars2chr(by_vars)
    assert_unit(dataset, wbc_code, required_unit = wbc_unit, 
        get_unit_expr = !!get_unit_expr)
    dataset_temp <- dataset %>% filter(PARAMCD == !!wbc_code | 
        PARAMCD == !!diff_code | PARAMCD == !!set_values_to$PARAMCD) %>% 
        select(!!!by_vars, PARAMCD, AVAL)
    dataset_abs <- dataset_temp %>% filter(PARAMCD == !!set_values_to$PARAMCD) %>% 
        mutate(temp_flag = "Y") %>% select(!!!by_vars, temp_flag)
    dataset_temp <- dataset_temp %>% left_join(dataset_abs, by = by_vars_str) %>% 
        filter(is.na(temp_flag))
    if (diff_type == "percent") {
        analysis_value <- expr(!!sym(paste0("AVAL.", wbc_code)) * 
            !!sym(paste0("AVAL.", diff_code))/100)
    }
    else if (diff_type == "fraction") {
        analysis_value <- expr(!!sym(paste0("AVAL.", wbc_code)) * 
            !!sym(paste0("AVAL.", diff_code)))
    }
    # chokes here
    dataset_new <- dataset_temp %>% derive_param_computed(parameters = c(wbc_code, 
        diff_code), by_vars = by_vars, set_values_to = exprs(AVAL = !!analysis_value, 
        !!!set_values_to)) %>% filter(PARAMCD == !!set_values_to$PARAMCD) %>% 
        select(-starts_with("temp_"))
    if (nrow(dataset_new) == 0L) {
        message("No source records meet condition for calculation, therefore no new records created")
        dataset
    }
    else {
        bind_rows(dataset, dataset_new)
    }
}
<bytecode: 0x5595234661d8>
<environment: namespace:admiral>
> 

g = function(ds=NULL,
             set_values_to=NULL) list(nrow(ds), set_values_to)
  
f = function(ds) {
  t = tibble(hp = c(1,2)) 

  g(ds = ds, 
    set_values_to = exprs(A = 3,
                          B= t$hp,
                          C= !!t$hp)
                          
                          
    )
}

#  dplyr has data storms
f(storms)