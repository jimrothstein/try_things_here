---
title: "`r knitr::current_input()`"
date: "`r paste('last updated', 
    format(lubridate::now(), ' %d %B %Y'))`"
output:   
  html_document:  
        code_folding: show
        toc: true 
        toc_depth: 3
        toc_float: true
        mathjax:  default
  pdf_document:   
    latex_engine: xelatex  
    toc: true
    toc_depth:  3
    extra_dependencies: ["amssymb", "bbm", "threeparttable", "forest"]
  knitr:
    opts_chunk: 
      collapse: true
      comment: "#>" 
      R.options:
        knitr.graphics.auto_pdf: true
fontsize: 10pt   
geometry: margin=0.4in,top=0.25in   
TAGS:  conditions,errors,simpleCondition, simpleError,handler
---

<!--   KEEP as qmd -->

## To Do

-  convert latex dependencies 
-  convert to .qmd

## 910_basic_conditions.qmd

SEE also: ~/code/try_things_here/ADVANCED_R/BOOK/0800_Ch8_*

- cat() requires `\n`, immediate; 
- message() is cat plus `\n`, goes to `std.err`, useful to explain default settings
- author of function signals a condition
- user of function must handle
- warnings()  are cached, then prints together
- if `try()` throws error, the error is printed and execution conditions after the `try`
- if `trycatch()` throws error, function user must handle.  Execution *does not* continue.
- message, warning, error have DEFAULT behavior, to modify this behavior use exit or calling handler.
- to suppress:  `suppressMessages, Warnings()...`:w
- Base R has conditions, but rlang has several methods to handle, probe, etc.

## Diagram

\begin{forest}
  for tree={
    fit=band,% spaces the tree out a little to avoid collisions
  }
  [condition, text=red  % a comment
    [simpleCondition, tier=condition ]
    [error, tier=abstract 
      [simpleError, tier=error
         [divisonError, tier=custom]
      ]
    ]
    [warning, tier=abstract 
      [simpleWarning, tier=warning]
        [divisonError, tier=custom]
      ]
  ]
\end{forest}

```{r setup, include=FALSE		}
knitr::opts_chunk$set(echo = TRUE,
                      comment = "      ##",
                      error = TRUE,
                      collapse = FALSE   ) # easier to read
library(rlang)
```


  *  This file for my notes: basic try-catch/conditions.
  *  Second file is for custom conditions and uses S3 tools. 


## Topics to include:
  * basic try/catch/finally
  * gotchas 
  * traceback 
  * throwing with stop, warning and signalCondition
  * catching:  with handlers
  * adding class=
  * decomposing thrown conditions

## Notes on R `condition system`
  *  overall mechanism to handle conditions (aka: exceptions, errors, warnings)
  *  **code** signals (or throws) a condition.
  *  `condition system` matches condition and invokes the best handler function.


### Condition

  *  S3 object, constructor is simpleCondition()
    minimal contains 2 char[1] (strings): "message" and "call"
  *  message is for user, call refers to function where condition occurred.  
  *  Hadley prefers to not include call.
  *  Hierarchy:  condition; subclasses:  simpleCondition, exception, warning
    ... Each can subclassed, such as simpleException.
  *  Built-in simple*() constructors

  *  More details in code.


### Handler   (aka error handling)

  *  a regular R function, with at least one arg for condition object.
  *  Two flavors:
      *  Exiting handler (mostly for errors) does not allow code to continue.
      *  Calling handler (mostly for non-errors) handles (aka modify or
        swallow) the condition and allows code to continue, just a regular
        function returns control.


## start basic, tryCatch
```{r basic}
## better
  tryCatch( sqrt("abc"),
    error = function(e) e
  )

```


## try alone
```{r}
#| collapse: true

try(2+3)
# throw error
#------------------------  

try(log("a"))
#------------------------  

z  <- try(log("b"))
# details in returned object
z
```

stop(...) 0,1,n args
```r
stop(..., call. = TRUE)  # throws error

# error includes function `f`, concatenates
f  <- function() {
  stop("Throw error", "includes function")
}

f()
```

Last error/trace info
```r
f()
traceback()
rlang::last_error()
rlang::last_trace()
```

## simpleCondition:  built-in subclass of condition object
  *  not much in book.
```{r simpleCondition}
formals(simpleCondition)
args(simpleCondition)

# create one
s  <- base::simpleCondition("jim")

# examine s
s
str(s, max.depth=1)
class(s)
inherits(s, "condition")  # T
typeof(s)  # boring list
conditionMessage(s) # jim
conditionCall(s)   # call where occured?

# simpleError 
e  <- simpleError("jim1")
e
str(e, max.depth=1)

# see how it work, first base:
tryCatch( {stop("jim1")
          print("never gets here")
    },

         error = function(e) e )

#  This creates an error, but does not signal (or throw it) 
tryCatch( {simpleError("jim1")
          print("never gets here")
    },

         error = function(e) e )

#  Ahh, bbut this thows error, then catches, and never return to print line.
tryCatch({signalCondition(
  errorCondition("jim1", call="I made this up")
 )
   print("never gets here")
    },

         error = function(e) e )

# Examine the object returned.
r  <- tryCatch( {signalCondition(errorCondition("jim1", call="I made this up"))
          print("never gets here")
    },

         error = function(e) e )

# we have the condition, it is r
str(r)
inherits(r, "condition")  # T
conditionCall(r)
```

## So far, focused on simpleCondition and none of other classes.   Before
proceeding, now examine handlers
```{r handlers}
```

```{r knit_exit(), include = FALSE  , eval=FALSE } 
# knitr::knit_exit()
```
