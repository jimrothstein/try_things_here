---
title: "079_lists_tidyr_purrr_unpack_nested_lists.Rmd"
output:
  html_document:
    df_print: paged
editor_options:
  chunk_output_type: console
---

### Tidyr:     unnest_longer, similar to 10_ but more using map_
### But EASIEST to follow:
- Step #4 https://tidyr.tidyverse.org/articles/rectangle.html

### Reference:
- >>Step #1  https://jennybc.github.io/purrr-tutorial/ls02_map-extraction-advanced.html
- Step #2 (if need) https://jennybc.github.io/purrr-tutorial/
- Step #3 https://github.com/jennybc/repurrrsive
- Step #4 https://tidyr.tidyverse.org/articles/rectangle.html

####  01-setup
```{r}
library(tidyverse)
library(purrr)
library(repurrrsive)  # recursive lists, R, JSON, ... also gh_repos
library(listviewer)   # interactive exam
```

```{r}
repos <- tibble(repo = gh_repos)
repos
jsonedit(repos)   # each of 6 siblings, has list of ~30 (total = 176)
##  
  dim(repos)
  length(repos$repo[1])   # 1 element
  length(repos$repo[[1]]) # its contents
  row1 = repos$repo[[1]]
  str(row1, max.level=1)
  str(row1, max.level=2, list.len=5, vec.len=1)


  ##  plunge in:  rectangle
repos1  <- repos %>% unnest_longer(repo)   # 176 x 1, column name = `repo`, each element <named list [68])
```

jsonedit(repos1)
#
repos2  <- repos1   %>% hoist(repo, # column repo included in result, too     
  login = c("owner", "login"),     # owner is list, select `login` element only
  name = "name",
  homepage = "homepage",
  watchers = "watchers_count"
)
repos2            # tibble, 176 x 5


#### 04_exercises-set I
```{r}
# 1 str()
# Practice str(x, max.level= , list.len= )
f <- function(x,i) str(x,max.level=i)
f(gh_users, 0)
f(gh_users, 1)
f(gh_users, 2)

# 2 list.len (default 99)
g <- function(x,i,j) str(x, max.level=i, list.len=j)

g(gh_users, 0, 1)
g(gh_users, 1, 1)
g(gh_users, 1, 3)

g(gh_users, 2, 3)

# play -------
# try this!
g(gh_users, 0,2)
g(gh_users, 1,2)
g(gh_users, 2,2)
map(c(0,1,2), ~g(gh_users, ., 2))

# Explain output!
l <- map(c(0,1,2), ~g(gh_users, ., 2))

# max.level (default is ALL)  
str(gh_users, list.len = 2)

# single component
str(gh_users[[5]], list.len =2)

# Exercise #3 (1, 2, 6, 18, 21, and 24)
# Find specific fields
find <- c(1,2,6,18,21,24)
gh_users[[5]][[1]]
gh_users[[5]][[2]]
gh_users[[5]][[6]]

# 3 ways to get specific fields from [[5]]
gh_users[[5]][[1:3]]
gh_users[[5]][c(1,2,6)]
gh_users[[5]][find]

# play -------
f <- function(x,i) str(x,max.level=i, list.len=2)
map(gh_users, ~f(.,c(2)))

# Exercise #4 (skip)
```

#### 05_Name and position shortcuts (map)

```{r}
# GOAL:   extract "login" from ALL 6
# map (<list,<FUN>) -> <list>  

# SHORTCUT for applying function(x) x[["login"]], x[[18]] to each element
map(gh_users, "login")
map(gh_users, 18)

```
#### 06_EXERCISES
```{r}
#1 - find "created_at"
names(gh_users[[5]])   # item [29]

# created at , for each user
map(gh_users, 29)
map_chr(gh_users, 29) # better (chr vector)
map_chr(gh_users, "created_at") # better (chr vector)


#2   try "fake"
map_chr(gh_users, "fake")  # nasty error

#3    try  99, outof bounds
map_chr(gh_users, 99)  # also, nasty error

#4,#5 skip

```

#### 07_Type-specific map
```{r}
# omit (done above)

```

#### 08_Extract multiple values
```{r}
# example, note: returns <list> 
gh_users[[5]][c(1,2,3,4)]


# 2  methods
# map(<df>, <FUN>, ...) -> <list> 
map(gh_users, `[`, c(1,2,3,4))
map(gh_users, `[`, c("id","avatar_url"))

# magrittr::extract

# JR:fix   
map(gh_users,c(2))  # each element, find 2nd element


# But!
map(gh_users,c(1,2)) #  all NULL
map(gh_users,c(c(1), c(2)) )  # NULL  
map(gh_users,c(c(1), c(2)) )  # NULL  

# Almost!
c(map(gh_users,c(1)),
  map(gh_users,c(2))
)

```

#### 09_map_df -> <tibble>
```{r}
map_dfr(gh_users, `[`, c(1,2,3))   # note:  conversion

# 
gh_users %>% { 
  tibble(login = map_chr(., "login"),
         id    = map_int(., "id"),
         avatar_url = map_chr(.,"avatar_url")
  )
} 

# explain!
gh_users %>%  
  tibble(login = map_chr(., "login"),
         id    = map_int(., "id"),
         avatar_url = map_chr(.,"avatar_url")
  )
 

```

#### 10_gh_users: use_tibble_tools
```{r}
# tibble 6 x 1, each item is <named list [30]>
users   <- tibble (user = gh_users)
s(users,1)
s(users, 2, 4)

# users[[1]] contents of first (and only) column: list of 6, each is list of 30
# users[[1]][1] contents of first row (of6), which is a list of 30

s(users[[1]][1],max.level= 2, list.len=10)  # first char, show first 2 levels, only 10/30 in each
# better!
s(users$user[1], 2, 10)


## best
names(users$user[[1]])
```

#### 11_Tidyr 1.0 break_tibble_into_multiple_column
```{r}
# JennyBC written prior to Tidyr 1.0
users   <- tibble (user = gh_users)

# unnest_wider(<df>, <list-column>)
users %>% unnest_wider(user)  # 6 x 30, not normalized

```
#### 12_Tidyr 1.0 redo - using hoist
```{r}
# put out 3 columns + last with remainer [27]
# tibble 6 x 4
users %>% hoist(user, 
  followers = "followers", 
  login = "login", 
  url = "html_url"
)
```

#### (JennyBC) 13_gh_repos, increase list complexity
```{r}
# return to JennyBC:

##  PROBE STRUCTURE 
# user info approx 30
# repo tied to that user ~60
gh_repos %>% str(max.level=1)


# first element is list of 30; 
gh_repos[[1]] %>% str(max.level=1)

# and first of these is a list of 68, mostly singletons, some lists
gh_repos[[1]][[1]] %>% str(max.level=1)
gh_repos[[1]] %>% str(max.level=2, list.len= 3)

c <- gh_repos[[1]]
```

#### 15_vector_input
```{r}
# "navigating"?
# Each element (total 6), check first element (out of 30), and third element (of 68)
map_chr(gh_repos, c(1,3))  # <chr_vector>
map(gh_repos, c(1,3)) # <list>



# each user has multiple repositories
# still tibble of 6 x 1, but each row list of variable length (# reposit)
repos <- tibble(repo = gh_repos)
repos


length(repos$repo[[1]])  # 30

# each user (login) has mulitple.....
# but ...  each row is list of 30, containng a list of68
s(repos$repo[[1]], 2, 2)
s(repos$repo[[2]], 2, 2)

```
#### 15_vector_input_EXERCISe
```{r}
# ain't easy
# for each of 6 users, choose 1 repo (of 30), then 4th element of 68 ($owner), then 1st ($login)
map_chr(gh_repos,
        c(1,4,1))


# work!!
h <- function(x,s)x[[1]][[1]][[4]][[s]]
h(gh_repos, 1)
h(gh_repos, "login")

g <- function(x,s)x[[1]][[1]][[4]]$login
g(gh_repos) 



# nope
map_chr(gh_repos,
        c(1,4,"login"))
```


#### 14_tidyr - easier
```{r}

# hoist(<tibble>, <list-column>, <specifc name>) -> <tibble> with <list_c

repos <- tibble(repo = gh_repos)

# each user has up to 30 repos, we want list of all the repos
unnest_longer(repos, repo)

repos %>% unnest_longer(repo) %>% 
  hoist(repo, 
  login = c("owner", "login"), 
  name = "name",
  homepage = "homepage",
  watchers = "watchers_count")

repos %>% 
  hoist(repo, owner = "owner")
```

