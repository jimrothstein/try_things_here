---
title: "mtcars_basic"
format: html
editor: source
editor_options: 
  chunk_output_type: console
execute: 
  error: true
  collapse: true
  output-dir: docs   
---

<!-- #| error:   true means display error, but DO NOT halt -->


SEE:  https://rfordatascience.slack.com/archives/C04LH661EUX/p1679540376937849
envir=mtcars and enclosure

## Problem:  Try to access directly columns inside a data.frame.
```{r}
# TODO: use option()
head <- function(df = NULL, n = 3) utils::head(df, n)
library(tibble)
```

Using just unquoted col name fails.
```{r}
# works
mtcars[1:5, c("hp")]

# fails
mtcars[1:5, hp]
```

SEE BELOW :       eval(expr, envir=mtcars, enclos=as.environment())
The reason as explained in many places, such as [dplyr](https://dplyr.tidyverse.org/articles/programming.html) ....., is mtcars exists in the environment, but not hp.

```{r}
hp
```

### Again this is explained in many places, along with several ways to `fix`, for example.
```{r}
with(mtcars, hp)
```
Of course, R's help also explains this but you must be comfortable with terms
like `environment` , `expression` and `parent` and what `constructing an
environment` with `data` means.
```{r}
?with
```


## And where does "mtcars" live?   I happen to know it is in packages on search
tree:  "package:datasets"
```{r}
exists("mtcars",
  envir = as.environment("package:datasets"),
  inherits = FALSE
)
```

## But not "hp"
```{r}
# alas, not hp
exists("hp",
  envir = as.environment("package:datasets"),
  inherits = T
)
```


```{r}
hp_exp <- quote(hp > 200) ##  hp > 200
is.call(hp_exp) ##  T
eval(hp_exp, envir = mtcars) ## logical vector
```

## solution from Rlang:
https://rlang.r-lib.org/reference/topic-defuse.html
```{r}
e <- expr(mean(cyl))
eval(e, mtcars)
#> [1] 6.1875
```

### Another way to find 'mtcars'
```{r}
any(sapply(
  1:(which(search() == "tools:rstudio") - 1L),
  function(pp) exists("mtcars", where = pp, inherits = FALSE)
))
any(sapply(
  1:(which(search() == "tools:rstudio") - 1L),
  function(pp) exists("mtcars", where = pp, inherits = TRUE)
))

## find position
(which(search() == "tools:rstudio") - 1L)
which(search() == ".GlobalEnv")
which(search() == "package:base")

# print vertically
search() |>
  tibble() |>
  print(n = length(search()))
```

from !so, next hook to search()
```{r}
is.defined <- function(sym) {
  sym <- deparse(substitute(sym))
  env <- parent.frame()
  exists(sym, env)
}

is.defined(a)
# FALSE
a <- 10
is.defined(a)
# TRUE
```

## Here is my own take.   It is same as above, but I find this way clearer.

Let's check what is current globalenv() the the environment.   Then packages attached to search path.
```{r}
ls()
search()
```



For our purposes, note there is no `hp`
```{r}
ls(base)
ls("package:base") |> grep(pattern = c("mtcars"))
```   

Attach `mtcars` to search path  
```{r}
attach(mtcars)
search()
```

Now, can find `hp`, but not subset
```{r}
hp

mtcars[hp > 200]
```


Need the 
```{r}
code1 <- expression(hp > 200)
code <- quote(hp > 200)
identical(code1, code)



#  works, explain
eval(code, envir = mtcars)
eval(code, envir = mtcars, enclos = as.environment("package:base"))
eval(code, envir = mtcars, enclos = as.environment(emptyenv()))


# fails - explain
eval(code, envir = as.environment(mtcars))
eval(code, envir = as.environment(mtcars), enclos = as.environment("package:base"))
eval(code, envir = as.environment(mtcars), enclos = as.environment("package:datasets"))
```

Why?  col names are in environment one level up from  globalenv()
```{r}
ls(parent.env(globalenv()))
```



This will add mtcars into globalenv(), but not change search()
```{r}
?data
# This puts data in globalenv()
data(mtcars)
ls()
search()
```

Remove mtcars
```{r}
rm(mtcars)
ls()
mtcars[1:5, ]
ls()
```


eval(expr, envir=mtcars, enclos=as.environment())
GOAL;    evaluate mean(cyl + am)
```{r}
#   RESTART
ls()
search()

code <- expr(mean(cyl + am))
typeof(code)

is.expression(code)
rlang::is_expression(code)

# EXPLAIN:  why works?

eval(code, envir = mtcars)
eval(code, envir = mtcars, enclos = globalenv())
eval(code, envir = mtcars, enclos = as.environment("tools:rstudio"))
eval(code, envir = mtcars, enclos = as.environment("package:stats"))
eval(code, envir = mtcars, enclos = as.environment("package:base"))
```

##    From Hadley

```{r}
getOption("digits")
old <- options(digits = 7)
getOption("digits")
cyl <- 1000
dplyr::summarize(mtcars, .data$cyl)
dplyr::summarize(mtcars, mean(.data$cyl))
dplyr::summarize(mtcars, mean(.env$cyl))

dplyr::summarize(mtcars, mean(am + cyl))
dplyr::summarize(mtcars, mean(.data$am + cyl))
dplyr::summarize(mtcars, mean(.data$am + .env$cyl)) # am mostly 0, 1

options(old)
getOption("digits")
```


```

vim:conceallevel=0
