--- 
title: Template for .Rmd 
date: "`r paste('last updated', 
    format(lubridate::now(), '%H:%M, %d %B %Y'))`"
format:
    html
#     pdf: 
#         latex_engine: lualatex
#         toc: TRUE 
#         toc_depth:  4 
fontsize: 10pt 
qeometry: margin=0.4in,top=0.25in 
TAGS:  deparse, substitute, symbol
editor_options: 
  chunk_output_type: console
execute: 
  cache: true   #  no re-render code if unchnaged
  error: true
  collapse: true
---

REF: https://stackoverflow.com/questions/25235240/r-variable-names-symbols-names-or-something-else/25235365#25235365


##  R allows string or symbol
```{r}

# clear globalenv
rm(list = ls())

```

####    Symbol, aka name
```{r}
q2  <- quote(x)
is.symbol(q2)       #T
```
####    Symbol represents value or stored object (Hadley, tidyr cheat)
Constants are not symbols
```{r}
is.symbol("hello")
is.symbol(x=5)
z=10
is.symbol(z)

# not
is.symbol(pi)
is.symbol(expression(pi))

# yes
is.symbol(expr(pi))

```

#### Coerce to symbol, or name
```{r}
x  <- 4

typeof(x)
is.object(x)   # F

# coerce
as.name(x)
as.symbol(x)
identical(as.name(x), as.symbol(x))

ls()
```

#### What is `4`
```{r}
typeof(as.name(x))
typeof(`4`)       # not found
is.object(`4`)
typeof(`4`)
is.symbol(`4`)
```

#### convert to symbol name
```{r}
ls()
y = as.name(x)
y

is.object(y)
typeof(y)
is.symbol(y)
is.name(y)

names(y)
attributes(y)
```

```{r}

## for variable, use as.name
is.symbol(as.name(x))
is.symbol(as.name(x))
is.symbol(quote(x))
identical(as.name(x), quote(x))

eval(y)
eval(`4`)
```



####    cast to vector of type symbol
```{r}
z = as.vector(x, "symbol")
z
is.symbol(z)
is.name(z)
typeof(z)
```

####    Not symbol
```{r not_symbol}
is.symbol(4)

## ??
is.symbol(as.name(4))
z  <- as.name(4)

## weird
is.symbol(z)



##  for function, use quote
f  <- function() {}
is.symbol(quote(f))

is.symbol(f)
## error
if (F) is.symbol(as.name(f))
```

<just added:    5 MAY>
### What is Symbol?

 *  Lisp calls it symbol
 *  S calls it name
 *  Symbols refer to R objects. The name of any R object is usually a symbol. Symbols can be created through the functions as.name and quote. They naturally appear as atoms of parsed expressions, try e.g. as.list(quote(x y)).   Ref: R Language 2.1.3.1


#### Create with as.symbol
```{r symbol}
## x is a double
x  <- 5

## turn x into a symbol 
    s  <- as.symbol(x)
    is.symbol(s)
    typeof(s)
    storage.mode(s)
    mode(s)

    if (F) eval(s) #error
```
```{r parse}
p  <- parse(text = "{
## x is a double
x  <- 5

## turn x into a symbol 
    s  <- as.symbol(x)
    is.symbol(s)
    typeof(s)
    storage.mode(s)
    mode(s)

    if (F) eval(s) #error
}"
)
```
####    functions ???
```{r function}
f  <- function() {}

is.symbol(f)
# [1] FALSE

q  <- quote(f)
is.symbol(q)
# [1] TRUE

### FAIL
name  <- as.name(f)
s  <- as.symbol(f)

```


#### Create with as.name 
```{r name}
y  <- 5
name  <- as.name(y)
name
# `5`
is.symbol(name)
# [1] TRUE
storage.mode(name)
typeof(name)
eval(name)  #error
```

#### Create using quote 
```{r quote}
z  <- 5
name  <- quote(z)
# z
typeof(name)
# [1] "symbol"

eval(name)
# [1] 5
```
#### Future shortcut
```{r shortcut}
y  <- 5
name  <- as.name(y)

sapply(list(is.symbol, 
            typeof, 
            mode, 
            storage.mode), 
       do.call, list(quote(name)))

# [1] "TRUE"   "symbol" "name"   "symbol"
```



