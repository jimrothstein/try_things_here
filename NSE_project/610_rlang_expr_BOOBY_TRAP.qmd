---
output:
  pdf_document: default
  html_document: default
TAGS:  rlang, expr, call2, ast
editor_options: 
  chunk_output_type: console
---

PURPOSE:    defuse basic examples (pauses evalutation), like quote, bquote
SEE booby-trap
https://rlang.r-lib.org/reference/topic-defuse.html
##
```{r}
library(tidyverse)
####
#   lang::expr returns exactly what typed
####
expr(mean(x, na.rm = TRUE))
expr(10 + 100 + 1000)
```



## Using rlang::expr to  `Defusing` an argument (pausing evalution)
```{r}
arg = warn("boom!")

ignore = function(x) NULL
force = function(x) x

ignore(arg)

# why differ?
force(arg)       # do not understand
force(warn("boom!"))


## Can we defuse arg ?   YES

rlang::expr(force(warn("boom!")))   # aka capture expression

## After defuse, let it evaluate !   YES
eval(rlang::expr(force(warn("boom!"))))   # 

```

# but not inside functions
```{r} 
f <- function(x) expr(x)
f(c(0, 10, a + b + c))
f(a + b + c)
```

```{r}
#   enexpr uses lazy loading? delays?
g <- function(x) enexpr(x)
g(a + b + c)
```

## capture, manipulate expression
```{r message=TRUE, warning=TRUE}
f <- expr(f(x = 1, y = 2))
f
# add arg
f$z <- 3
f
#   Check elements as a list
f[[1]]
f[[2]]
f[[3]]
f[[4]]
```

Added May 5
```{r}
library(rlang)


a=1
b=2

rlang::expr(a+b)
rlang::expr(a + !!b)      ## a + 2
rlang::expr(!!a + !!b)      ## 1 + 2

rlang::expr(a + {{b}} )     ## a + ~2
```

---

```{r}
e = rlang::expr(a+b)
e                         ## a+b
{{e}}                     ## a+b

eval(e)                   ## a+b 


##
expr(log(e))              ##  log(e)
expr(log(!!e))            ##  log(a+b)
expr(log( {{e}}) )        ##  log(~a+b)


eval(expr(log(!!e)))      ## 1.1
eval(expr(log( {{e}} )))  ## Error



expr(log( eval(e ) )   ## Error

```

```{r}
#y<- x * 10

# how to capture expression BEFORE evaluated?
z <- rlang::expr(y <- x * 10)
z

z = expr(1+1)
as.list(z)
eval(z)

x = 2
z = expr(1 + .(x))
z
eval(z)

name="jim"
eval(print("hello",  {{name}}))


```

# z is 'expression'
```{r}
z
x<-4
# now eval the expression
base::eval(z)
y
```

<Added May 5>
rlang::expr | rlang::enexpr
```{r 17.2_code}
rlang::expr(a + b + 10)
expr(some_fun(a))

capture_it <- function(x) expr(x)
capture_it(a + b + 10) # x

capture_it2 <- function(x) enexpr(x)
capture_it2(a + b + 10) # returns a+b+10
capture_it2(caller_env())


# STUDY f
f <- expr(f(x = 1, y = 2))
typeof(f)
class(f)
attributes(f)

f # just its value
f[[1]] # its name?
f[[2]]
f[[3]]

as_list(f)

# f[[4]]
```
lobstr::ast
```{r 17.3_code}
lobstr::ast(x + y)
lobstr::ast(f(x, y))
lobstr::ast(f(x, g(y)))

lobstr::ast(f(x, g(h(z)), h(z)))
ast(ff <- expr(f(x, y)))
```

rlang::call2() create function (given a tree) 
```{r 17.4}
# must quote
rlang::call2("f", "y", "z")
rlang::call2("f", 1, 2)


# inverse!
ast(call2("f", 1, 2))

#
# error, nice try
# call2(ast(f(x,y)))
```

alternative to call2 to develop code, use !!  unquote
```{r 14.4_contiue}
# quote (makes expression?)
xx <- expr(x + x)
yy <- expr(y + y)

# create R code: (uquote expression?)
expr(!!xx / !!yy)

# inverse!
ff <- expr(f(x, y))
expr(!!ff)


# create code

f <- function(var) {
    var <- enexpr(var) # capture
    expr(3 * (!!var)) # do something, and capture this.
}
f(x)
f(x + y)
f(f(x))
f(1 + 3 + x)

# Hadley's example:
cv <- function(var) {
    var <- enexpr(var)
    expr(sd(!!var) / mean(!!var))
}
```

##  rlang:  defuse and boom!
##  REF: https://rlang.r-lib.org/reference/topic-defuse.html
##  TODO:  Dont't understand why Hadley introduces new term "defuse", isn't is just quotation?
```{r}
ignore <- function(arg) NULL
force <- function(arg) arg

ignore(1+1) # NULL
force(1+1) # [1] 2

##  Compare result
warning("boom") # [1] "boom"
force(warning("boom")) # [1] "boom"
ignore(warning("boom")) # NULL


##  Problem ?   Diffuse, delay the  force function from evaluation?
##  All the same
bquote(force(warning("boom"))) # force(warning("boom"))
quote(force(warning("boom"))) # force(warning("boom"))
expr(force(warning("boom"))) # force(warning("boom"))


##  defuse, make expression vector
e = expression(force(warning("boom")))
is.expression(e) # [1] TRUE

e # expression(force(warning("boom")))

# now let it go!
eval(e) # [1] "boom"

```

