[
  {
    "objectID": "410_bquote_example.html",
    "href": "410_bquote_example.html",
    "title": "410_bquote",
    "section": "",
    "text": "bquote(hello)                             ##  hello\n..........&gt; hello\nbquote(\"hello\")                           ##  \"hello\"\n..........&gt; [1] \"hello\"\n\n## even when x is undefined\nrm(x)\n..........&gt; Warning in rm(x): object 'x' not found\nbquote(x)                   ## x\n..........&gt; x\n\n\nx = 1\ny = 2\nz = 3\n(xyz &lt;- bquote(x + y + z))                ##    (x + y + z)\n..........&gt; x + y + z"
  },
  {
    "objectID": "410_bquote_example.html#section",
    "href": "410_bquote_example.html#section",
    "title": "410_bquote",
    "section": "",
    "text": "theta = pi/4 bquote(sin(1 + .(theta))) ## sin(1 + 0.7853…) eval(bquote(sin(1 + .(theta)))) ## 0.977"
  },
  {
    "objectID": "410_bquote_example.html#compare-quote-and-bquote",
    "href": "410_bquote_example.html#compare-quote-and-bquote",
    "title": "410_bquote",
    "section": "compare quote and bquote",
    "text": "compare quote and bquote\n\n\n# bquote - step by step ,   .() operator\nbquote(1+2)       # 1 + 2\n..........&gt; 1 + 2\n\ntwo = 2\nbquote(1 + two)   # 1 + two\n..........&gt; 1 + two\nbquote(hello)\n..........&gt; hello\nbquote(1 + .(two))   # 1 + 2   (substitution, not eval)\n..........&gt; 1 + 2\n\neval(bquote(1 + two)) # 3 \n..........&gt; [1] 3\neval(bquote(1 + .(two)))   # 3 \n..........&gt; [1] 3\n\n###—————————–"
  },
  {
    "objectID": "018.2_abstract_syntax_tree.html",
    "href": "018.2_abstract_syntax_tree.html",
    "title": "18.2_Abstract_syntax trees",
    "section": "",
    "text": "library(rlang)\nlibrary(lobstr)\n\nlobstr::ast(f(x, \"y\", 1))   # knitr complains about character\n\n█─f \n├─x \n├─\"y\" \n└─1 \n\nlobstr::ast(\n    f(g(1, 2), h(3, 4, i()))\n)\n\n█─f \n├─█─g \n│ ├─1 \n│ └─2 \n└─█─h \n  ├─3 \n  ├─4 \n  └─█─i \n\nlobstr::ast(\n    f(g(h(2)))\n)\n\n█─f \n└─█─g \n  └─█─h \n    └─2 \n\n# 18.2.3 infix\nx = 2\ny &lt;- x * 10\n\n# as prefix\n`&lt;-`(y, `*`(x, 10))\n\nlobstr::ast(\n        `&lt;-`(y, `*`(x, 10))\n)\n\n█─`&lt;-` \n├─y \n└─█─`*` \n  ├─x \n  └─10"
  },
  {
    "objectID": "410_bquote_example.html#like-quote-bquote-can-quote-its-argument",
    "href": "410_bquote_example.html#like-quote-bquote-can-quote-its-argument",
    "title": "410_bquote",
    "section": "",
    "text": "bquote(hello)                             ##  hello\n..........&gt; hello\nbquote(\"hello\")                           ##  \"hello\"\n..........&gt; [1] \"hello\"\n\n## even when x is undefined\nrm(x)\n..........&gt; Warning in rm(x): object 'x' not found\nbquote(x)                   ## x\n..........&gt; x\n\n\nx = 1\ny = 2\nz = 3\n(xyz &lt;- bquote(x + y + z))                ##    (x + y + z)\n..........&gt; x + y + z"
  },
  {
    "objectID": "410_bquote_example.html#like-quote-bquote-can-return-character-call-expression",
    "href": "410_bquote_example.html#like-quote-bquote-can-return-character-call-expression",
    "title": "410_bquote",
    "section": "Like quote, bquote can return character, call, expression",
    "text": "Like quote, bquote can return character, call, expression\n\nxyz\n..........&gt; x + y + z\nis.expression(xyz)\n..........&gt; [1] FALSE\nis.character(xyz)\n..........&gt; [1] FALSE\ntypeof(xyz)\n..........&gt; [1] \"language\"\nis.call(xyz)            ## TRUE\n..........&gt; [1] TRUE\neval(xyz)               ## 6\n..........&gt; [1] 6\n\n\n(res = (bquote(hello)))\n..........&gt; hello\nis.call(res)\n..........&gt; [1] FALSE\nis.character(res)\n..........&gt; [1] FALSE\nis.expression(res)\n..........&gt; [1] FALSE\nis.symbol(res)          ## TRUE\n..........&gt; [1] TRUE\n\neval(res)               ## Error, b/c no object \n..........&gt; Error in eval(res): object 'hello' not found\n\n\n\n(res = (bquote(\"hello\")))\n..........&gt; [1] \"hello\"\nis.call(res)\n..........&gt; [1] FALSE\nis.character(res)       ## TRUE\n..........&gt; [1] TRUE\nis.expression(res)\n..........&gt; [1] FALSE\nis.symbol(res)          ## \n..........&gt; [1] FALSE\n\neval(res)               ## \"hello\"\n..........&gt; [1] \"hello\"\n\n(res = bquote(~x+y))    ## ~x+y\n..........&gt; ~x + y\nis.call(res)            ## TRUE \n..........&gt; [1] TRUE\npurrr::is_formula(res)\n..........&gt; [1] TRUE"
  },
  {
    "objectID": "410_bquote_example.html#bquote-also-allows-parts-to-be-quote-and-parts-to-be-evaluated-and-substituted-immediately",
    "href": "410_bquote_example.html#bquote-also-allows-parts-to-be-quote-and-parts-to-be-evaluated-and-substituted-immediately",
    "title": "410_bquote",
    "section": "bquote also allows parts to be quote and parts to be evaluated and substituted immediately",
    "text": "bquote also allows parts to be quote and parts to be evaluated and substituted immediately\n\nx = 1\n\nquote(1 + .(x))   # 1 + .(x) \n..........&gt; 1 + .(x)\n(res=bquote(1 + .(x)))  # 1 + 1\n..........&gt; 1 + 1\nis.call(res)\n..........&gt; [1] TRUE\nis.expression(res)\n..........&gt; [1] FALSE\n\n\n(res=bquote(template + .(x)))\n..........&gt; template + 1\nis.call(res)\n..........&gt; [1] TRUE\nis.expression(res)\n..........&gt; [1] FALSE\n\n(res=bquote(sin(.(x)))) # sin(1)\n..........&gt; sin(1)\n(res=bquote(sin(.(x+1)))) # sin(1)\n..........&gt; sin(2)\nis.call(res)\n..........&gt; [1] TRUE\nis.expression(res)\n..........&gt; [1] FALSE\n\n(res=bquote(sin(.(x+1)), splice=TRUE)) # sin(1)\n..........&gt; sin(2)"
  },
  {
    "objectID": "410_bquote_example.html#splice-in-r-4.0.0-multiple-expresssions",
    "href": "410_bquote_example.html#splice-in-r-4.0.0-multiple-expresssions",
    "title": "410_bquote",
    "section": "SPLICE in R 4.0.0 (multiple expresssions)",
    "text": "SPLICE in R 4.0.0 (multiple expresssions)\nhttps://stackoverflow.com/a/60689381/5057251 https://stackoverflow.com/q/72039909/5057251 (multiple ways)"
  },
  {
    "objectID": "410_bquote_example.html#stole-from-httpsgithub.comklmrbox",
    "href": "410_bquote_example.html#stole-from-httpsgithub.comklmrbox",
    "title": "410_bquote",
    "section": "(stole from https://github.com/klmr/box)",
    "text": "(stole from https://github.com/klmr/box)\nsubject=“bquote” mod_name=“base” bquote(help(topic = .(subject), package = .(mod_name))) eval( bquote(help(topic = .(subject), package = .(mod_name))))\nsubject=“quote” eval( bquote(help(topic = .(subject), package = .(mod_name)))) ##\nd = 2 bquote(a+b+c + .(d)) ## a + b + c + 2"
  },
  {
    "objectID": "410_bquote_example.html#section-1",
    "href": "410_bquote_example.html#section-1",
    "title": "410_bquote",
    "section": "",
    "text": "z= bquote(sin(1 + .(theta))) ## sin(1 + 0.7853…) typeof(z) ## “language” is.call(z) ## T eval(z) ## 0.977\n\n::: {.cell hash='410_bquote_example_cache/html/unnamed-chunk-6_bfc5dd3dd7e360f94032c16c06e1ea63'}\n\n```{.r .cell-code}\nx = 5 \nbquote(x == .(x))\n..........&gt; x == 5\nbquote(.(x))\n..........&gt; [1] 5\n\n## from ethz documentation, takes expr, returns lang ob\ndefault &lt;- 1\n(z = bquote( function(x, y = .(default)) x+y ))\n..........&gt; function(x, y = 1) x + y\n\ntypeof(z)\n..........&gt; [1] \"language\"\nis.call(z)  #T\n..........&gt; [1] TRUE\nis.expression(z) #F \n..........&gt; [1] FALSE\nis.symbol(z) #F\n..........&gt; [1] FALSE\na = 2\nplot(1:10, a*(1:10), main = bquote(a == .(a)))\n\n\n\n\n\n(angle  = 1:10)\n..........&gt;  [1]  1  2  3  4  5  6  7  8  9 10\n(variable = as.name(\"angle\"))             ## variable is now a symbol\n..........&gt; angle\n\nis.character(variable)  # FALSE\n..........&gt; [1] FALSE\n\nis.name(variable)   # TRUE\n..........&gt; [1] TRUE\nis.symbol(variable) # TRUE\n..........&gt; [1] TRUE\ntypeof(variable)    # TRUE\n..........&gt; [1] \"symbol\"\n\n##\nexpr = quote(x+y)\nis.expression(expr) # FALSE\n..........&gt; [1] FALSE\nis.call(expr)      # TRUE\n..........&gt; [1] TRUE\nstr(expr)\n..........&gt;  language x + y\n\n#-----------------------------\n##  quasiquotation:  insert .... into an expr template; return expression\npdf()\n\n\nplot(x = 1:10, y=91:100)\n\nbquote(x= .(variable))\n..........&gt; Error in bquote(x = .(variable)): unused argument (x = .(variable))\nbquote(\n  plot(x = .(variable), \n       y = sin(.(variable)))\n  )\n..........&gt; plot(x = angle, y = sin(angle))\n\ndev.off()\n..........&gt; png \n..........&gt;   2\n:::\n\n## A variable to pass in\ncor &lt;- -.321\ncor2 &lt;- '-.321'\n\npar(mfrow = c(1, 2))\nplot(1:10, 1:10, main = bquote(\"Hello\" ~ r[xy] == .(cor) ~ \"and\" ~ B^2))\nplot(1:10, 1:10, main = bquote(\"Hello\" ~ r[xy] == .(cor2) ~ \"and\" ~ B^2))\n\n\n\n\n\nbquote(\"Hello\")\n..........&gt; [1] \"Hello\"\nbquote(\"Hello\" ~ 3)\n..........&gt; \"Hello\" ~ 3\nbquote(\"Hello\" ~ r[xy])\n..........&gt; \"Hello\" ~ r[xy]\nx = 2\nbquote(\"hello\" ~ .(x))\n..........&gt; \"hello\" ~ 2\nbquote(\"x\" ~ .(x))\n..........&gt; \"x\" ~ 2\nbquote(\"The answer \"  ~.(x))\n..........&gt; \"The answer \" ~ 2\nbquote(x == .(x))\n..........&gt; x == 2\nif (F) bquote(x = .(x))\n\n# want 1 + 2\ny = 1\nx=2\nbquote( function(x, y = .(y)) x+y )\n..........&gt; function(x, y = 1) x + y\neval(bquote( function(x, y = .(y)) x+y ))\n..........&gt; function(x, y = .(y)) x+y\neval(eval(bquote( function(x, y = .(y)) x+y )))\n..........&gt; function(x, y = .(y)) x+y"
  }
]