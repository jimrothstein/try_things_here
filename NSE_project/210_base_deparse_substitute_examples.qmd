--- 
title: Template for .Rmd 
date: "`r paste('last updated', 
    format(lubridate::now(), '%H:%M, %d %B %Y'))`"
format: 
  html: 
    toc: true
    html-math-method: katex
    fontsize: smaller
    number-sections: true
#   pdf:
#     latex_engine: lualatex
#     toc: TRUE 
#     toc_depth:  4 
geometry: margin=0.4in,top=0.25in 
TAGS:  deparse, substitute
editor_options: 
  chunk_output_type: console
execute: 
  error: true
  collapse: true
  standalone: true
  output-dir: docs
---


#### REF: 
https://stackoverflow.com/questions/46834655/whats-the-difference-between-substitute-and-quote-in-r
https://statisticsglobe.com/parse-deparse-expression-r-function

\section{USE CASE:  base::subtitute}
- User calls function `f` \code{f};   what did user use as argument?
```{r}
w = function(arg) print(arg)

f = function(arg) substitute(arg)

(res = f(1:10))     ## 1:10, which is a call.
w(1:10)     #  1 2 3 ... 10

x = 10
f(x)
w(x)        # 10

x = 10
y = 100
f(x + y^2)

# z does not exist
f(x+y+z)
```
##  Compare quote and substitute

```{r}
r1 = quote(x + 5*3)
r2 = substitute(x + 5*3 )
is.call(r1,r2)
```


```{r}
g = function(arg) deparse(substitute(arg))

g(1:10)
g(x)
g(x + y^2)
g(x + y + z)
```
```{r}

##  surprise, f(arg) returns the code user submitted:  arg  , it does Not allow evaluate and so does not see 1:10
## 'substitute returns the parse tree for the (unevaluated) expression expr, substituting any variables bound in env.'
f(arg)
g = function(arg) deparse(f(arg))
g(1:10)   ## "arg"
```


```{r example}

f <- function(argX) {
   list(argX, 
        quote(argX), 
        substitute(argX)
        )
}
    
suppliedArgX <- 100
f(argX = suppliedArgX)
f(argX  <-  suppliedArgX)
f(suppliedArgX)
```

```{r}

## substitute return a call (unevaluated)
    expr  <- substitute(suppliedArgX  <- 100)
    is.call(expr)

## quote returns a symbol, which is NOT a call.
    expr2  <- quote(suppliedArgX)
    typeof(expr2)
    is.call(expr2)
    expr2
## but easy to evaluate:
    eval(expr2)
```


####  String can not be 'evaluated'
```{r call}
s  <- "5+5"

##  Not 10  
eval(s)
# [1] "5+5"

is.call(s)
# [1] FALSE

is.expression(s)
# [1] FALSE


##  But quote will allow eval
    s  <- quote(5+5)
    s
    # 5 + 5

    eval(s)
    # [1] 10
    
    ## because it is a call
    is.call(s)
    # [1] TRUE
    is.expression(s)
    # [1] FALSE


```


```{r simplest??}
rm(x)


## x undefined, which is fine.  
## quote captures the UNEVALUATED expression.
quote(x + 1 )


## But in FUN, need to use substitute() to capture unevaluated content of call.
f  <- function(x) {
    y  <- quote(x)
}

(f(a+1))


g  <- function(x) {
    y  <- substitute(x)
}

(g(a+1))
# a + 1

## ERROR
if (F)
    g(a+1)(1)

eval(g(a+1), list(a=1))
# [1] 2
```

```{r mtcars}

{ ## no error
f  <- function(x) {}
f(abdcd)
}

{ ## ERROR 
    if (F) {
    g  <- function(x) {x}
    g(abdcd)}
}

mtcars

##  Without substitute, R can not find a variable h(mpg) ... ERROR.
##  With substitute, evaluation is paused; 
h  <- function(col) {
    y  <- substitute(col)
    mean(mtcars[[y]])
    
}

(h("mpg"))
(h(mpg))

(h(hp))

```


#### parse:  string --> R expression
```{r parse}

## create expression
    create_expr <- function(string = "2^2") {
        parse(text = string)
    }

    ex1  <- create_expr()
# expression(2^2)


## verify it is R expression

    is.expression(ex1)
    # [1] TRUE
    typeof(ex1)
    # [1] "expression"



string  <- "2^2"
typeof(string)
# [1] "character"

res  <- parse(text = string)
res
# expression(2^2)

is.expression(res)
# [1] TRUE
typeof(res)
# [1] "expression"
```

#### eval:  R expression --> value?
```{r eval}
eval(res)
# [1] 4
```

#### eval: R expression in different env, 2 results!
```{r env}
## create
    e1  <- create_expr("x + 1")
    # expression(x + 1)


## eval fail becasue no x
    x  <- NULL  
    if (!is.null(x) ) {
        if (exists("x")) eval(e1)
    }

## create 2 env
    env1  <- new.env()
    env1$x  <- 10

    env2  <- new.env()
    env2$x  <- 100

## eval e1 in both
    eval(e1, envir=env1)
# [1] 11
    eval(e1, envir=env2)
# [1] 101

##  Note: a difference, if x exists or is NULL
    rm(x)
    if (F) eval(e1) # error

    x  <- NULL
    eval(e1)
    # numeric(0)
```


```{r is.call}
is.call(sin(1))
# [1] FALSE


typeof(sin(x=1))
# [1] "double"

{
substitute(sin(1))
# sin(1)

substitute(sin(x=1))
# sin(x = 1)

typeof(substitute(sin(x=1)))
# [1] "language"

is.expression(sin(x=1))
# [1] FALSE


is.expression(substitute(sin(x=1)))
# [1] FALSE

is.call(substitute(sin(x=1)))
# [1] TRUE
is.call(substitute(sin(x)))
# [1] TRUE
is.call(substitute(sin(1)))
# [1] TRUE
}
```
```{r }
f  <- function(x) {
    res  <- substitute(x) # 
    return(list(res = res,
                deparse = deparse(res), 
                typeof = typeof(res), 
                is.call = is.call(res), 
                as.character = as.character(res) 
                #expression = parse(text = as.character(res))
    )
    )

}

(f(a))
(f(a+b))
(f(a+1))
( f(1+2) )


typeof((f(function(e) e^2))[[1]])
is.call((f(function(e) e^2))[[1]])
(f(function(e) b + e^2))


```

#### deparse:   R expression --> string (actually structure, not an inverse)
NOT a usual USE CASE

```{r deparse}
d  <- deparse(res)
d
# [1] "structure(expression(2^2), srcfile = <environment>, wholeSrcref = structure(c(1L, "
# [2] "0L, 2L, 0L, 0L, 0L, 1L, 2L), srcfile = <environment>, class = \"srcref\"))"        

typeof(d)
# [1] "character"

## guarantees character of length=1
deparse1(d)

```

#### substitute --> 
```{r basics}

x  <- 1; y  <- 2; z  <- 3


## substitute
substitute(x) # returns what ever was in the call; in this case just x.
# x


is.symbol(substitute(x))
# [1] TRUE

substitute(2)
# [1] 2

substitute(x + y)
# x + y

is.expression(substitute(x+y))
# [1] FALSE


## deparse(substitute)
deparse(substitute(x))
# [1] "x"

deparse(substitute(x+y))
# [1] "x + y"


is.character(deparse(substitute(x)))
# [1] TRUE

```

#### Adv-R, 1st Editiion, 
  *  Roughly:  substitute returns code
  *  deparse returns string
```{r hadley}
f  <- function(x) deparse(x)
g  <- function(x) f(substitute(x))

g(1:10)
# [1] "1:10"
unlist(strsplit("1 + 2",split="") )
# [1] "1" " " "+" " " "2"
g(x)
# [1] "x"

g(x +y^2/z  + exp(a  + sin(b)))
# [1] "x + y^2/z + exp(a + sin(b))"

```



```{r advanced}
f = function(a, ...) {
        # browser() 
        # substitue(a) returns x, unquoted, ie symbol
        # arg is "x", dots is NULL, 
        arg = deparse(substitute(a))
        dots = substitute(list(...))[-1]
        c(arg, sapply(dots, deparse))
}

x  <- 1; y  <- 2; z  <- 3

substitute(x)
# x
is.symbol(substitute(x))
# [1] TRUE


deparse(substitute(x))
# [1] "x"

is.character(deparse(substitute(x)))
# [1] TRUE

f(x)
# [[1]]
# [1] "x"
# 

f(x,y,z)
# [1] "x" "y" "z"

```

Return the unevaluated expression, deparsed (not a call?)
```{r}
f  <- function(x = { 2*x}){
  as.character(rlang::enexpr(x))
    }
    


f(2+2)
f(sin(2))
f(sin(2) + cos(2))
f(sin(x))
```


```{r knit_exit()} 
knitr::knit_exit() 
```

```{r render, eval=FALSE, include = F	} 
file <- "0210_base_deparse_substitute_examples.Rmd"
file  <- normalizePath(file)


rmarkdown::render(file, 
       output_format="pdf_document",
       output_dir = "~/Downloads/print_and_delete"
       )


```
