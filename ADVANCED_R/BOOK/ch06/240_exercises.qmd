```
 6.2.5 Exercises



    Given a name, like "mean", match.fun() lets you find a function. Given a function, can you find its name? Why doesn’t that make sense in R?
    
    Anonymous functions not found to name.
    
    
    
    

    It’s possible (although typically not useful) to call an anonymous function. Which of the two approaches below is correct? Why?

Second form is correct way to call anonymous functions;
```r

# returns object `3()`
    function(x) 3()
    #> function (x) 
    #> 3()  # ??

# correct
    (function(x) 3)()
    #> [1] 3
    ```

A good rule of thumb is that an anonymous function should fit on one line and shouldn’t need to use {}. Review your code. Where could you have used an anonymous function instead of a named function? Where should you have used a named function instead of an anonymous function?

What function allows you to tell if an object is a function? What function allows you to tell if a function is a primitive function?

This code makes a list of all functions in the base package.

objs <- mget(ls("package:base", all = TRUE), inherits = TRUE)
funs <- Filter(is.function, objs)

Use it to answer the following questions:

    Which base function has the most arguments?

    How many base functions have no arguments? What’s special about those functions?

    How could you adapt the code to find all primitive functions?

What are the three important components of a function?

When does printing a function not show the environment it was created in?
