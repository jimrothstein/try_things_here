---
title:  "`r knitr::current_input()`"
date: "`r lubridate::today()`"
format:
    html_document:
        toc: true 
        toc_depth: 3
        toc_float: true
---

## Binomial Sampling
Purpose:   Examples of sampling from binomial distribution


### Notation:
  -  p prob success, just 1 event
  -  n obs in 1 sample (size)
  -  k success in 1 sample
  -  B number of repeat samples (n)

### rbinom(n = B, size = n, p = p) returns SUCCESSes

```{r setup, include=FALSE		}
library(tibble)
```

### Theory:   

*   heads in 1 sample = n*p
*   sd = sqrt(n*p*q)
*   confidence interval (assuming n large enough to be 'normal'): 2 * sd 

Meaning:   repeat sample 100 times, 95% of computed confidence intervals will
include the true mean (which know is np)

# ---------------------------------
##  Toss coin 100 times, # heads?
# ---------------------------------
```{r rbinom}
# 1 sample(set 100 obs)

n  <- 100 # in 1 sample
p  <- 0.5
B  <- 1

set.seed(2020) # 52 successes

x <- rbinom(n = B , size=n, p=p)
x #52
```
Mean, in this sample, is 52.

## Repeat trial B  times, each one is 100 flips, # heads? 
```{r repeat_experiment}
B  <- 10
B  <- 1000
B  <- 2000
B  <- 10000

x <- rbinom(n=B, size=n, p=0.5)
head(x)

#   expect normal?
mean(x) # [1] 50.4
sd(x) # [1] 4.96
# 95 CI
L = mean(x) - sd(x)
U = mean(x) + sd(x)

paste0("[", as.character(L), ",",as.character(U), "]")
hist(x, breaks=10 )
```

Theory:
*   mean

## Want to see each H,T for 100 throws?
```{r sample}

n  <- 100
B  <- 1

x  <- rbinom(n = n, size = B, p =p)
head(x)
```
### Same, using sample() for nicer way to see H,T for 100 throws.
```{r using_sample}
# syntax a little differnt (no B, repeated samples)
x  <- sample(x =  c("H","T"),
		size = n,
		replace = TRUE,
		prob = c(0.5,0.5)
		)
head(x)

# creates 1 long string
# y  <- stringr::str_c(x, collapse="")		# collapse
# head(y)
knitr::knit_exit()
```

```{r counting}

# of the 40 experiments, how many returned > 55 heads?
knitr::knit_exit()
table(x) # of 40 samples, distribution of success totals 

table(x  >  55)   # of 40 samples(each 100), how many more than 55 successes

table(x  >  57) # 

table(x > 60) # 0
```


## Repeating Sampling
```{r }

# ----Series of Bernoulli Trials			----

# int[10]
n  <- 100 # (sample size)
p  <- 0.5
B  <- 10  # take B samples (each n)

# throw dice 100 times, count heads (repeat 10)
rbinom(n = B,size=n, prob=0.5)
```



```{r knit_exit(), eval=FALSE } 
knitr::knit_exit() 
```

\newpage
BEGIN HERE, CI
```{r BEGIN}

# FOR REAL
set.seed(1492)
B = 100                                # B, number samples 
n = 1000                               # n, throws in  each trial
X  <- sample(x = c(1,0),
		size= B * n,# NUMBER THROWS
		replace= TRUE,
		prob= c(0.5,0.5)
		)

m <- matrix(rbinom(n=B * n, 
		   size=1,
		   0.5), 
	       ncol=n) # 
m[1,1]
## test
m1 <- matrix (rbinom(n=nExp*nThrows,size=1,
		     0.5),
	      nrow=nThrows)

mean(colSums(m))
sd(colSums(m))

sqrt(250)  # 15.8

plot(colSums(m))
hist(colSums(m))

head(m)
dim(m)

## What does CI (Confidence Interval)  mean?
#  ============================================
## Suppose want to find percentage of students (many) with tatoos
##
## How ?   SAMPLE
p = 0.4  # (usually do not know)
n = 75   # students, sample size
## FACT
## se_bar = sqrt( p_bar * (1 - p_bar)/n)
##

## Take a Sample  (ie string of yes/no, 1,0)
r  <- sample(x = 0:1,
             size = 75,
             replace = TRUE, 
             prob = c(0.6, 0.4))
r
sum(r) #31
p_bar = sum(r)/n
p_bar   # 0.413

## And the 95% CI?
se_bar = sqrt( p_bar * (1 - p_bar)/n)
se_bar   # 0.0569
L  <- p_bar - 1.96*se_bar
U  <- p_bar + 1.96*se_bar
cat("p_bar = ", p_bar, "\n", "CI = ", "(", L, ", ", U, ")",  "\n")
contains_TRUE =  p_bar >= L   && p_bar <= U
contains_TRUE

# ------------------------------------------
## What does 95% confident actually mean??
# ------------------------------------------
one_sample  <- function(DUMMY = null) {  # 1 sample
    # proporation, each trial: 
    p_bar  <- sum(rbinom(n=1, size=size, prob = prob))/size

    ## And the range in proportion, each trial?
    se_bar = sqrt( p_bar * (1 - p_bar)/size)
    L  <- p_bar - 1.96*se_bar
    U  <- p_bar + 1.96*se_bar
    # cat("p_bar = ", p_bar, "\n", "CI = ", "(", L, ", ", U, ")",  "\n")
    contains_TRUE =  (L < prob)   && ( prob < U )
    new  <- tibble::tibble(p_bar = p_bar, L=L, U=U, contains_TRUE = contains_TRUE)
    t <<- rbind(t, new)
    invisible()
}

size =  1000                            # each trial, number throws 
B    =  1000                           # number of trials 
prob = 0.5 

t  <- tibble::tibble()

lapply(0:B, one_sample)

# view
t
print(t, n=100)

# to see only FALSE   
t[!t$contains_TRUE,]
count(t[!t$contains_TRUE,])   # 64

# order
print(t[order(-t$L),], n=100)

```
## plots
```{r plot}

file  <- "out"
png(filename = paste0("~/Downloads/print_and_delete/" , file,".png"),
         width = 480, height = 480, units = "px", pointsize = 12,
          bg = "white",  res = NA,
         type = c("cairo", "cairo-png", "Xlib", "quartz")
)

mean(t$p_bar)

var(t$p_bar)                           # 0.000238 

hist(t$p_bar)
dev.off()

##   Theory, count should be np,  sd should be sqrt(size*p*q)
##   n=100 per throw, p = 1/2
##   expect 50, 2 * 5 = 10  (95%) 
##   5, +- 2* 1/sqrt(10)
##   5 +- 2*sqrt(p*p/n)
n
2*sqrt(p*p/n)                          # 0.1 
```


