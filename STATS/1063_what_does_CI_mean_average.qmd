
---
title: "030_quarto_katex_html_references.qmd"
format: 
  html:
    toc: true
    html-math-method: katex
editor: source
editor_options: 
  chunk_output_type: console
---

```
(this is fenced)
```

::: callout-note
This is a **play** file.
Note that there are five types of callouts, including: `note`,
`warning`, `important`, `tip`, and `caution`.
:::

## What does 95% confident actually mean??

Take n random numbers, between ....., take average, and st dev, 95% CI
Repeat this many times (B).
Observe 5% of averages fall outside 95% CI?


https://askgoodquestions.blog/2019/10/07/14-how-confident-are-you-part-1/
TODO:
-   overestimating se ?
-   better line segments
-   Large B,  use histogram to depict # do not containe TRUE p



Theory: width of CI vs n
sigma = 1, 
95%,  1.96
x
```{r}
n=100
n = c(10^2, 10^3, 10^4, 10^5, 10^6)
1.96*1/(sqrt(n))

# width of 95% CI
curve(2*1.96/sqrt(x), from=10^2, to=10^5, xlab="sample size", ylab = "width 95%CI", col="blue")


```

Fake data, mean=0, sd = 1, with replacement, n points
m = 0
```{r}
# true mean
m = 0
# true sd
sigma= 1

n=100
B=10^4

# true 95 % CI
m + 1.96*1/sqrt(n)
m - 1.96*1/sqrt(n)
qnorm(c(0.025, .975 ))


one_sample = function(DUMMY = NULL) {
    sample = rnorm(n=n,mean= m, sd=sigma )
    #hist(sample)

    avg = mean(sample)

    sd = sd(sample)
    L = avg - 1.96*sd/sqrt(n)
    U = avg + 1.96*sd/sqrt(n)

    contains_TRUE =  (L < m)   & ( m < U )
    new  <- tibble::tibble(avg=avg, L=L, U=U, contains_TRUE = contains_TRUE)
    t <<- rbind(t, new)
    invisible(t)
}

t  <- tibble::tibble()
z= lapply(1:B, one_sample)

#t[order(t$L), ]
nrow(t[!t$contains_TRUE,])

for (i in 1:20) {
t  <- tibble::tibble()
z = lapply(1:B, one_sample)
cat(nrow(t[!t$contains_TRUE,]), "\n")          # expect 5 out 100 outside 95%CI 
}

# expect then (as estimage), our population is :
```
Theory: True population mean lies in interval:  (95% confidence)
$$ \bar{x} \pm 1.96\frac{\sigma}{n^\frac{1}{2}}$$
$$ \bar{x} \pm 1.96\frac{\sigma}{\sqrt{n}}$$
$$ \bar{x} \pm 1.96\frac{s}{\sqrt{n}}$$

$$ a \pm b$$

Return # heads in sample of 75, fair coin: 
`rbinom (n=1, size = 75, prob= 0.5)`:  ren string of yes/no, 1,0  (size # trials)

From this ONE sample, estimate the number of heads and expected 95% CI (2 st)

Repeat B times (large number), calc 2 standard deviations each time, and plot expect upper and lower.
Compare this Theory

For counts:  mean should be p*n, standard dev squrt(n*p*q)
For proportion:   p, sqrt(p*q/n) 
$$   $$


```{r include=F, eval=F}
t  <- tibble::tibble()
prob = 0.5
n = 1000
B = 10^4
n*prob # [1] 50
sqrt(prob*(1-prob)/n) # [1] 0.05
2*sqrt(prob*(1-prob)/n) # [1] 0.10   (2 sd)
.05*B   # 50

old  <- options(digits = 4)
one_sample  <- function(DUMMY = NULL) {  # 1 sample
    # p_hat is percentage heads 
    p_hat  <- rbinom(1, size=n,  prob = prob)/n

    ## And the range, for any single p_bar, standard error
    se_p_hat = sqrt( (p_hat * (1 - p_hat))/n)
    ## CI,   For 95% use = 1.96, OR
    L  <- p_hat - 1.96*se_p_hat
    U  <- p_hat + 1.96*se_p_hat
    contains_TRUE =  (L < prob)   & ( prob < U )
    new  <- tibble::tibble(p_hat = p_hat, L=L, U=U, contains_TRUE = contains_TRUE)
    t <<- rbind(t, new)
    invisible(t)
}


#   Run experiment many, many times (expected value)

for (i in 1:5) {
t  <- tibble::tibble()
z = lapply(1:B, one_sample)
cat(nrow(t[!t$contains_TRUE,]), "\n")          # expect 5 out 100 outside 95%CI 
}

nrow(t[t$p_hat > 0.50, ])
nrow(t[t$p_hat < 0.50, ])
nrow(t[t$p_hat ==  0.50, ])

# view
t
t[order(t$L), ]
nrow(t[!t$contains_TRUE,])

if (F) {
hist(t$p_hat)
hist(t$L)
hist(t$U)
}
```

## Plot sample estimate with error bars
```{r include=F, eval=F}
library(ggplot2)
head(t)
(t = t[order(-t$U), ])
t = cbind(t, n= as.integer(rownames(t)))
names(t)
head(t)
ggplot(t, aes(x = L,xend = U,y = n,   , yend =n    )  ) +
  geom_segment(arrow = arrow(length=unit(0.10,"cm"), ends="first", type = "closed")) +
  geom_line(x = .5)
```
```{r eval=F, include=F}
#https://ggplot2.tidyverse.org/reference/geom_segment.html
df2 <- expand.grid(
  lineend = c('round', 'butt', 'square'),
  linejoin = c('round', 'mitre', 'bevel'),
  stringsAsFactors = FALSE
)

df2 <- data.frame(df2, y = 1:9)
df2

#ggplot(df2, aes(x = 1, y = y, xend = 2, yend = y, label = paste(lineend, linejoin))) +
#  geom_segment(
#     lineend = df2$lineend, linejoin = df2$linejoin,
#     size = 3, arrow = arrow(length = unit(0.3, "inches"))
#  ) +
#  geom_text(hjust = 'outside', nudge_x = -0.2) + xlim(0.5, 2)
```


## plots

## Error Bars
```{r include=F, eval=F}
library(ggplot2)

# Define the top and bottom of the errorbars
p <- ggplot(t[order(t$U), ], aes(p_hat, 1:nrow(t)))
p

p +
  geom_point() +
  geom_errorbarh(aes(xmax = U , xmin = L , height = .1))


p +
  geom_point() +
  geom_errorbarh(aes(xmax = resp + se, xmin = resp - se, height = .1))

```



