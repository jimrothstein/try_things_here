PURPOSE: do.call basic examples.

TAGS:	do.call, rbind,

#### Call: Unevaluted function, where args ARE evaluated. Function is NOT a
call.
```{r intro_call}
    f  <- function(x) {
	x^2}

    # create a call
    (cl  <- call("f", 3))
    # f(3)

    ##  Test for call.
	sapply(list(f, "f", cl), is.call) # [1] FALSE FALSE  TRUE
    ##  To evaluate a call.
	eval(cl) # [1] 9
```


### do.call use case:  long arg list
<!-- {{{ -->
* (differs from most examples here)
```{r use_case}
  g  <- function(x,y,z) {x+y+z}

  ##  package the values in a list AND run the function
  do.call("g", list(1,2,3))
# [1] 6
```<!-- }}} -->

### do.call vs lapply
<!-- {{{ -->
```{r do_call_simple}
# acts on entire list
  do.call("sum", list(1,2,3))

# acts on each element of list
  x= lapply(list(1,2,3), sum)
  dput(x)

# list(1, 2, 3)
```
<!-- }}} -->


---
---

PURPOSE:    more examples of do.call()
REF: https://www.r-bloggers.com/2023/05/the-do-call-function-in-r-unlocking-efficiency-and-flexibility/

TODO
2023-06-02
-   more do.call examples (from r-bloggers this REF)
-   show how do.call can be constructed, manipulated  (or better with  call object)

### match.call , in real life
  *  use case:
  *  do.call(what, args), where `what` is function, args is list
  *  here:  match.call()[-1] drops 1st element (function) 

##  match.call() returns call (this form, no args and inside f, refers uses f itself)
```{r begin}
f <- function(x, y, z) {
    z = as.list(match.call())
    cat(unlist(z[-1]), "\n")   ## args only

  do.call("sum", as.list(match.call()[-1])) 
}

f(1, 2, 3)

```




rbind a list  of atomic
Try with df, explain as written NOT a df
```{r}
vectors <- list(c(1, 2, 3), c(4, 5, 6), c(7, 8, 9))   ## list   
combined_matrix <- do.call(rbind, vectors)            ## 

##  NOTE
    class(combined_matrix) # [1] "matrix" "array" 
    typeof(combined_matrix) # [1] "double"


combined_matrix
```



