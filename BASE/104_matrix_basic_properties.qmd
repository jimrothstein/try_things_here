
title: "`r knitr::current_input()`"
date: "`r paste('last updated', 
    format(lubridate::now(), ' %d %B %Y'))`"
output:   
  html_document:  
        code_folding: show
        toc: true 
        toc_depth: 2
        toc_float: true
        mathjax: default
  pdf_document:   
    latex_engine: xelatex  
    toc: true
    toc_depth:  2   
fontsize: 11pt   
geometry: margin=0.4in,top=0.25in   
---

2023-08-13

TODO:
  *   move basic matrix useage/properties to this file

##  PURPOSE:   Basic Matrix properties


###  Matrix can be make from int[] and dim !
  *  Adds class automagically

```{r setup, include=FALSE		}
knitr::opts_chunk$set(
  echo = TRUE,
  comment = "      ##",
  error = TRUE,
  collapse = TRUE
) # easier to read
```


```{r library 		}
# print all labels
file <- knitr::current_input()
print(knitr::all_labels())
``` 

### matrix is a vector? yes
```{r setup}
A <- matrix(c(1, 0, 0, 1), nrow = 2)
A
is.matrix(A)
is.array(A)

class(A)
dput(A)
attributes(A)
```

#### Roll my own matrix?

```{r}
v <- c(1, 0, 0, 1)
is.matrix(v)


# make one change
dim(v) <- c(2L, 2L)
v
is.matrix(v)
attributes(v)
class(v)
```



```{r}
library(data.table)
```

### `not inside R chunk` (interactive)
return for `r installed.packages()`

### Study matrix properties, using installed.packages() as example

```{r}
x = installed.packages()

is.matrix(x) # [1] TRUE
is.array(x) # [1] TRUE
# $dim # [1] 264  16
# 
str(x, )
#  chr [1:264, 1:16] "abind" "AsioHeaders" "askpass" "attachment" ...
#  - attr(*, "dimnames")=List of 2
#   ..$ : chr [1:264] "abind" "AsioHeaders" "askpass" "attachment" ...
#   ..$ : chr [1:16] "Package" "LibPath" "Version" "Priority" ...

?dimnames
dimnames(x) # list of 2
dimnames(x)[[1]][1:5]
dimnames(x)[[2]]
# package name
attributes(x)$dimnames[[1]][1:5]
# [1] "abind"       "AsioHeaders" "askpass"     "attachment"  "backports"  

# pkg properties
attributes(x)$dimnames[[2]]
#  [1] "Package"               "LibPath"              
#  [3] "Version"               "Priority"             
#  [5] "Depends"               "Imports"              
#  [7] "LinkingTo"             "Suggests"             
#  [9] "Enhances"              "License"              
# [11] "License_is_FOSS"       "License_restricts_use"
# [13] "OS_type"               "MD5sum"               
# [15] "NeedsCompilation"      "Built"                

dimnames(x)[[1]]

# all 2x !
dimnames(x)[[1]] == "class"
dimnames(x)[[1]] == "Matrix"
dimnames(x)[[1]] == "MASS"
dimnames(x)[[1]] == "lattice"
dimnames(x)[[1]] == "KernSmooth"

str(x)
y = x
head(y[y[, "Package"] == "class",, drop=F ])
head(y[y[, "Package"] == "lattice",, drop=F ])
y[y[, "Package"]] == "class"


```
### setdiff

```{r}
a=c(1,2)
b=c(1,3)
setdiff(a,b)
?setdiff
```



### matrix to df and back, not exactly identical (fixable)

```{r}
m = matrix(1:10, nrow=5)
str(m)

df = as.data.frame(m)
m1 = as.matrix(df)
identical(m,m1) # [1] FALSE

# Problem is:
dimnames(m)
dimnames(m1)

# Fix is: 
dimnames(m1)  <- NULL
identical(m, m1) # [1] TRUE
```


### installed.packages to df and back
```{r}
x
df  <- as.data.frame(x)
x2   <- as.matrix(df)


# surprise
identical(x, x2) # [1] FALSE
identical(dimnames(x), dimnames(x2)) # [1] FALSE

dimnames(x)[[1]]
dimnames(x)[[2]]

a=dimnames(x)[[1]]
b=dimnames(x2)[[1]]

identical(a, b) # [1] FALSE  "class"!

identical(a[1:237], b[1:237])
a[237:250]
b[237:250]

# 1:N (N=238) are the same!
N = 238  # "class" vs "class.1"

dimnames(x)[[1]][238:261]
dimnames(x2)[[1]][238:261]

a == "class"
b ==  "class"

a == "class1"
b ==  "class1"


dimnames(x)[[1]] == "class"
dimnames(x)[[1]] == "class.1"

dimnames(x2)[[1]] == "class"
dimnames(x2)[[1]] == "class.1"

dimnames(x)[[1]] == "class.1"
dimnames(x)[[1]] == "class.1"

a %in% b
setdiff(a,b)

setdiff(dimnames(x)[[1]][N], dimnames(x2)[[1]][N]) # character(0)
attributes(dimnames(x))
```

### Remove rows, columns?
```{r}

```



### matrix basics (all values same type)
```{r}
A <- matrix(1:9, ncol=3)

# A is filled with 1,...,9 columnwise
A
     [,1] [,2] [,3]
[1,]    1    4    7
[2,]    2    5    8
[3,]    3    6    9

# only elements with even number in 2nd column of same row

# knocks out 1 row (row 2), then converts to vector 
 v <- A[A[,2] %% 2 == 0]
v
# [1] 1 3 4 6 7 9

# keeps structure
m <- A[A[,2] %% 2 == 0,]
m

```

### matrix attributes,  with/without names
```{r}
A
attributes(A)
str(A)
# $dim
# [1] 3 3
# 
rownames(A) <- paste("Row-", 1:3) 
colnames(A) <- LETTERS[1:3]
A
attributes(A)

str(A)
```
### Modify matrix, attributes adjust
```{r}

m <- A[A[,2] %% 2 == 0,]
attributes(m)
str(m)
```

### `[`, subset useage, with matrix & old.packages() as example
```{r}
x=c(1,2,3)
x[[1]] == 1
x[c(T,T,F)]
x[x[] == 1]
x[x[] == 1 | 
  x[] == 3]


z = old.packages()
z[, 1:2]

colnames(z)
rownames(z)

z["Matrix", ]
z["Matrix", 1:2]
z[c("Matrix" ,  "mgcv"), 1:2]
z[c("Matrix" ,  "mgcv", "nlme"), 1:2]

if (F) z[c("Matrix" ,  "mgcv", "ZZZ" ), 1:2] # fails 
if (F) z[list("Matrix"), 1:2]          #  fails 
if (F) z["Matrix" | "mgcv", 1:2]              # fails 

z[z[, "Package"] == "Matrix"]
z[z[, "Package"] == "Matrix"][[2]]
z[z[, "Package"] == "Matrix"][1:2]

z[, "Package"] %in% rownames(z)
z[, "Package"] %in% c("Matrix")
z[, "Package"] %in% c("Matrix", "mgcv")

# packages
z[z[, "Package"] %in% c("Matrix", "mgcv"), 1:2, drop=F]

z[z[, "LibPath"] == .libPaths()[[2]],1:2] 
z[z[, "LibPath"] == .libPaths()[[1]], 1, drop=F] 
```

