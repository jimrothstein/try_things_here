z <- factor(mpg$drv)
plot(x, y, col = z)
legend("topleft", legend = levels(z), col = 1:nlevels(z), pch = 1, title = "Drive")
line(x,y, col=z)
f <- function(N, k) {
curve(f(N, k, prob),
from = 0,
to = 1,
col =5,
lwd = 3,
xname = "prob"
)
}
f(N=100, k=50)
f <- function(N, k) {
curve(f(N, k, prob),
from = 0,
to = 1,
col =5,
lwd = 3,
xname = prob
)
}
f(N=100, k=50, "x")
N=100
k=50
N=10
k=5
f <- function(N, k, prob="x") {
curve(f(N, k, prob),
from = 0,
to = 1,
col =5,
lwd = 3,
xname = prob
)
}
f(N=100, k=50)
N=100
k=50
N=10
k=5
f <- function(N, k, prob="x") {
curve(f(N, k, prob),
from = 0,
to = 1,
col =5,
lwd = 3,
xname = prob
)
}
f(N=100, k=50)
f <- function(size=N, x=k, prob){
dbinom(x=x,
size=N,
prob=prob)
}
draw <- function(N, k, prob="x") {
curve(f(N, k, prob),
from = 0,
to = 1,
col =5,
lwd = 3,
xname = prob
)
}
draw(N=100, k=50)
N=100
k=50
prob="x"
curve(f(N, k, prob),
from = 0,
to = 1,
col =5,
lwd = 3,
xname = prob
)
f
f <- function(size=N, x=k, prob){
dbinom(x=x,
size=N,
prob=prob)
}
formals(dbinom)
N=1000
k=500
dbinom(x=x,
size=N,
prob=prob)
dbinom(x=k,
size=N,
prob=prob)
N=1000
k=500
prop=.5
dbinom(x=k,
size=N,
prob=prob)
formals(dbinom)
args(dbinom)
is.numeric((N))
vapply(c(N,k,prop), is.numeric, T)
dbinom(x=k,
size=N,
prob=prob)
?dbinom
dbinom(x=c(500),
size=N,
prob=prob)
N=1000
k=500
prop=.5
is.numeric((N))
vapply(c(N,k,prop), is.numeric, T)
dbinom(x=c(500),
size=N,
prob=prob)
dbinom(x=c(500),
size=N,
prob=c(.5))
dbinom(x=c(500),
size=N,
prob=c(.1, .5))
curve(f(N, k, prob),
from = 0,
to = 1,
col =2,
lwd = 3,
xname = "prob"
)
curve(f(N, k, prob),
from = 0,
to = 1,
col =2,
lwd = 3,
xname = "prob"
)
N=100
k=10
curve(f(N, k, prob),
from = 0,
to = 1,
col =2,
lwd = 3,
xname = "prob"
)
k=90
curve(f(N, k, prob),
from = 0,
to = 1,
col =2,
lwd = 3,
xname = "prob"
)
curve(f(N, k, prob),
from = 0,
to = 1,
col =3,
lwd = 3,
xname = "prob"
)
curve(f(N, k, prob),
from = 0,
to = 1,
col =4,
lwd = 1,
xname = "prob"
)
curve(f(N, k, prob),
from = 0,
to = 1,
col =4,
lwd = 1,
lty = 2,
xname = "prob"
)
curve(f(N, k, prob),
from = 0,
to = 1,
col =4,
lwd = 1,
lty = 3,
xname = "prob"
)
curve(f(N, k, prob),
from = 0,
to = 1,
col =4,
lwd = 1,
lty = 4,
xname = "prob"
)
curve(f(N, k, prob),
from = 0,
to = 1,
col =4,
lwd = 1,
lty = 9,
xname = "prob"
)
curve(f(N, k, prob),
from = 0,
to = 1,
col =4,
lwd = 1,
lty = 12,
xname = "prob"
)
curve(f(N, k, prob),
from = 0,
to = 1,
col =3,
lwd = 1,
lty = 1
xname = "prob",
curve(f(N, k, prob),
from = 0,
to = 1,
col =3,
lwd = 1,
lty = 1,
xname = "prob",
add = T
)
curve(f(N, k, prob),
from = 0,
to = 1,
col =3,
lwd = 1,
lty = 1,
xname = "prob",
add = T
)
N=100
k=90
curve(f(N, k, prob),
from = 0,
to = 1,
col =4,
lwd = 1,
lty = 12,
xname = "prob"
)
k=10
curve(f(N, k, prob),
from = 0,
to = 1,
col =3,
lwd = 1,
lty = 1,
xname = "prob",
add = T
)
k=12
curve(f(N, k, prob),
from = 0,
to = 1,
col =5,
lwd = 3,
xname = "prob",
add = T
)
curve(f(N, k, prob),
from = 0,
to = 1,
col =5,
lwd = 1,
xname = "prob",
add = T
)
curve(f(N, k, prob),
from = 0,
to = 1,
col =3,
lwd = 1,
lty = 1,
xname = "prob",
add = T
)
curve(f(N, k, prob),
from = 0,
to = 1,
col =5,
lwd = 3,
xname = "prob",
add = T
)
k=12
curve(f(N, k, prob),
from = 0,
to = 1,
col =5,
lwd = 1,
xname = "prob",
add = T
)
z = c("k=500", "k=100", "k=990")
levels(z)
legend("topleft", legend = z, col = 1:nlevels(z), pch = 1, title = "k successes")
N=25
k=9
curve(f(N, k, prob),
from = 0,
to = 1,
col =5,
lwd = 1,
xname = "prob",
add = T
)
f <- function(size=N, k, prob){
dbinom(x=k,
size=N,
prob=prob)
}
N=100
k=90
prop=.5
##
## dbinom(x=c(500), size=N, prob=c(.1, .5))
##  Try lty=2,3,4....  "line type"
##  Fix N, and vary k.   Each k adds new curve.
curve(f(N, k, prob),
from = 0,
to = 1,
col =4,
lwd = 1,
lty = 12,
xname = "prob"
)
k=10
curve(f(N, k, prob),
from = 0,
to = 1,
col =3,
lwd = 1,
lty = 1,
xname = "prob",
add = T
)
curve(f(N, k, prob),
from = 0,
to = 1,
col =5,
lwd = 3,
xname = "prob",
add = T
)
N=25
k=9
curve(f(N, k, prob),
from = 0,
to = 1,
col =5,
lwd = 1,
xname = "prob",
add = T
)
z = c("k=500", "k=100", "k=990")
levels(z)
legend("topleft", legend = z, col = 1:nlevels(z), pch = 1, title = "k successes")
k=5
curve(f(N, k, prob),
from = 0,
to = 1,
col =5,
lwd = 1,
xname = "prob",
add = T
)
N=5
k=2
curve(f(N, k, prob),
from = 0,
to = 1,
col =5,
lwd = 1,
xname = "prob",
add = T
)
N=5
k=2
curve(f(N, k, prob),
from = 0,
to = 1,
col =5,
lwd = 1,
xname = "prob"
)
```
f <- function(size=N, k, prob){
pbinom(x=k,
size=N,
prob=prob)
}
N=100
k=90
prop=.5
##  Try lty=2,3,4....  "line type"
##  Fix N, and vary k.   Each k adds new curve.
curve(f(N, k, prob),
from = 0,
to = 1,
col =4,
lwd = 1,
lty = 12,
xname = "prob"
)
?pbinom
curve(dbinom(x=1, size=5, prob), from=0, to=1, xname="prob")
curve(dbinom(x=0, size=5, prob), from=0, to=1, xname="prob")
curve(dbinom(x=2, size=5, prob), from=0, to=1, xname="prob")
options(continue)
options(continue="")
options(continue=" ")
curve(dbinom(x=2, size=5, prob), from=0, to=1, xname="prob")
?continue
?options
getOption(continue)
getOption("continue")
x =
sine(3) +
q
option(continue=">")
options(continue= ">")
y =
y +
adsfkj
x =
sine(3) +
# install.packages("devtools")
devtools::install_github("lionel-/codegrip")
# install.packages("devtools")
devtools::install_github("lionel-/codegrip")
devtools:::run_examples()
?run_examples
devtools:::run_examples(as.package(devtools))
devtools:::run_examples(as.package("devtools"))
devtools::install_github("rstudio/addinexamples", type = "source")
names=base::names(par())
names
sapply(values, as.character)
values=uunname(par())
values=unname(par())
values= sapply(values, as.character)
values
values= sapply(values, as.character, simpllify=T)
values
values=unname(par())
values= vapply(values, as.character, NA_character_)
values=unname(par())
values=unlist(values)
values
values=unname(par())
values = as.character(values)
values
values=unname(par())
values = as.character(values)
t = tibble(names=names, values=values)
t
print(t, n=72)
# Create some variables
x <- 1:10
y1 <- x*x
y2  <- 2*y1
# Gives first line
plot(x, y1, type = "b", frame = FALSE, pch = 19,
col = "red", xlab = "x", ylab = "y")
# Add a second line
lines(x, y2, pch = 18, col = "blue", type = "b", lty = 2)
# Add a legend to the plot
legend("topleft", legend=c("Line 1: x*x", "Line 2: 2*x*x"),
col=c("red", "blue"), lty = 1:2, cex=0.8)
# Create some variables
x <- 1:10
y <- 5
# Gives first line
plot(x, y, type = "b", frame = FALSE, pch = 19,
col = "red", xlab = "x", ylab = "y")
y <- rep(x=5,  times=1)
y <- rep(x=5,  times=9)
# Create some variables
x <- 1:10
y <- rep(x=5,  times=9)
# Gives first line
plot(x, y, type = "b", frame = FALSE, pch = 19,
col = "red", xlab = "x", ylab = "y")
y
y <- rep(x=5,  times=length(x))
y
# Gives first line
plot(x, y, type = "b", frame = FALSE, pch = 19,
col = "red", xlab = "x", ylab = "y")
lines(x,y, pch=18, col="blue", type="b", lty=3)
# Gives first line
plot(x, y, type = "b", frame = FALSE, pch = 19,
col = "red", xlab = "x", ylab = "y")
lines(x,y, pch=18, col="blue", type="b", lty=3)
lines(x,y=rep(4, times=length(x)), pch=18, col="blue", type="b", lty=3)
lines(x,y=rep(3, times=length(x)), pch=18,cex=5,  col="blue", type="b", lty=3)
library(dplyr)
# What is the problem?
#
mtcars[, "hp"]
mtcars[, c("hp")]
mtcars[mtcars$hp > 200, ]
subset(mtcars, hp > 200)
is.environment(mtcars)
attach(mtcars)
is.environment(mtcars)
search()
mtcars[1:5, hp]
head(mtcars)
